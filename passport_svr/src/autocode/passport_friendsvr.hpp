// generated by pktcoder.
class req_Verify : public Packet {
public:
    enum { ID = 305 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u64 handle;
        unsigned int timestamp;
        str8 appId;
        str8 sig;
        str8 ppid;
        str8 ppToken;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u64>::save(_vobj, "handle", handle);
            PacketDataHelper<unsigned int>::save(_vobj, "timestamp", timestamp);
            PacketDataHelper<str8>::save(_vobj, "appId", appId);
            PacketDataHelper<str8>::save(_vobj, "sig", sig);
            PacketDataHelper<str8>::save(_vobj, "ppid", ppid);
            PacketDataHelper<str8>::save(_vobj, "ppToken", ppToken);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u64>::load(_vobj, "handle", handle);
            PacketDataHelper<unsigned int>::load(_vobj, "timestamp", timestamp);
            PacketDataHelper<str8>::load(_vobj, "appId", appId);
            PacketDataHelper<str8>::load(_vobj, "sig", sig);
            PacketDataHelper<str8>::load(_vobj, "ppid", ppid);
            PacketDataHelper<str8>::load(_vobj, "ppToken", ppToken);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.handle;
        s << DataStream::ccu(v.timestamp);
        s << v.appId;
        s << v.sig;
        s << v.ppid;
        s << v.ppToken;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.handle;
        s >> DataStream::cu(v.timestamp);
        s >> v.appId;
        s >> v.sig;
        s >> v.ppid;
        s >> v.ppToken;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_GetVip : public Packet {
public:
    enum { ID = 306 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u64 handle;
        unsigned int timestamp;
        str8 appId;
        str8 sig;
        str8 ppid;
        str8 ppToken;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u64>::save(_vobj, "handle", handle);
            PacketDataHelper<unsigned int>::save(_vobj, "timestamp", timestamp);
            PacketDataHelper<str8>::save(_vobj, "appId", appId);
            PacketDataHelper<str8>::save(_vobj, "sig", sig);
            PacketDataHelper<str8>::save(_vobj, "ppid", ppid);
            PacketDataHelper<str8>::save(_vobj, "ppToken", ppToken);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u64>::load(_vobj, "handle", handle);
            PacketDataHelper<unsigned int>::load(_vobj, "timestamp", timestamp);
            PacketDataHelper<str8>::load(_vobj, "appId", appId);
            PacketDataHelper<str8>::load(_vobj, "sig", sig);
            PacketDataHelper<str8>::load(_vobj, "ppid", ppid);
            PacketDataHelper<str8>::load(_vobj, "ppToken", ppToken);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.handle;
        s << DataStream::ccu(v.timestamp);
        s << v.appId;
        s << v.sig;
        s << v.ppid;
        s << v.ppToken;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.handle;
        s >> DataStream::cu(v.timestamp);
        s >> v.appId;
        s >> v.sig;
        s >> v.ppid;
        s >> v.ppToken;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_GetProfile : public Packet {
public:
    enum { ID = 307 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u64 handle;
        unsigned int timestamp;
        str8 appId;
        str8 sig;
        str8 ppid;
        str8 ppToken;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u64>::save(_vobj, "handle", handle);
            PacketDataHelper<unsigned int>::save(_vobj, "timestamp", timestamp);
            PacketDataHelper<str8>::save(_vobj, "appId", appId);
            PacketDataHelper<str8>::save(_vobj, "sig", sig);
            PacketDataHelper<str8>::save(_vobj, "ppid", ppid);
            PacketDataHelper<str8>::save(_vobj, "ppToken", ppToken);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u64>::load(_vobj, "handle", handle);
            PacketDataHelper<unsigned int>::load(_vobj, "timestamp", timestamp);
            PacketDataHelper<str8>::load(_vobj, "appId", appId);
            PacketDataHelper<str8>::load(_vobj, "sig", sig);
            PacketDataHelper<str8>::load(_vobj, "ppid", ppid);
            PacketDataHelper<str8>::load(_vobj, "ppToken", ppToken);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.handle;
        s << DataStream::ccu(v.timestamp);
        s << v.appId;
        s << v.sig;
        s << v.ppid;
        s << v.ppToken;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.handle;
        s >> DataStream::cu(v.timestamp);
        s >> v.appId;
        s >> v.sig;
        s >> v.ppid;
        s >> v.ppToken;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_GetToken : public Packet {
public:
    enum { ID = 308 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u64 handle;
        unsigned int timestamp;
        str8 appId;
        str8 sig;
        str8 ppid;
        str8 ppToken;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u64>::save(_vobj, "handle", handle);
            PacketDataHelper<unsigned int>::save(_vobj, "timestamp", timestamp);
            PacketDataHelper<str8>::save(_vobj, "appId", appId);
            PacketDataHelper<str8>::save(_vobj, "sig", sig);
            PacketDataHelper<str8>::save(_vobj, "ppid", ppid);
            PacketDataHelper<str8>::save(_vobj, "ppToken", ppToken);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u64>::load(_vobj, "handle", handle);
            PacketDataHelper<unsigned int>::load(_vobj, "timestamp", timestamp);
            PacketDataHelper<str8>::load(_vobj, "appId", appId);
            PacketDataHelper<str8>::load(_vobj, "sig", sig);
            PacketDataHelper<str8>::load(_vobj, "ppid", ppid);
            PacketDataHelper<str8>::load(_vobj, "ppToken", ppToken);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.handle;
        s << DataStream::ccu(v.timestamp);
        s << v.appId;
        s << v.sig;
        s << v.ppid;
        s << v.ppToken;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.handle;
        s >> DataStream::cu(v.timestamp);
        s >> v.appId;
        s >> v.sig;
        s >> v.ppid;
        s >> v.ppToken;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_RefreshToken : public Packet {
public:
    enum { ID = 309 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u64 handle;
        unsigned int timestamp;
        str8 appId;
        str8 sig;
        str8 ppid;
        str8 ppToken;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u64>::save(_vobj, "handle", handle);
            PacketDataHelper<unsigned int>::save(_vobj, "timestamp", timestamp);
            PacketDataHelper<str8>::save(_vobj, "appId", appId);
            PacketDataHelper<str8>::save(_vobj, "sig", sig);
            PacketDataHelper<str8>::save(_vobj, "ppid", ppid);
            PacketDataHelper<str8>::save(_vobj, "ppToken", ppToken);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u64>::load(_vobj, "handle", handle);
            PacketDataHelper<unsigned int>::load(_vobj, "timestamp", timestamp);
            PacketDataHelper<str8>::load(_vobj, "appId", appId);
            PacketDataHelper<str8>::load(_vobj, "sig", sig);
            PacketDataHelper<str8>::load(_vobj, "ppid", ppid);
            PacketDataHelper<str8>::load(_vobj, "ppToken", ppToken);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.handle;
        s << DataStream::ccu(v.timestamp);
        s << v.appId;
        s << v.sig;
        s << v.ppid;
        s << v.ppToken;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.handle;
        s >> DataStream::cu(v.timestamp);
        s >> v.appId;
        s >> v.sig;
        s >> v.ppid;
        s >> v.ppToken;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_GetFriendList : public Packet {
public:
    enum { ID = 310 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u64 handle;
        unsigned int timestamp;
        str8 appId;
        str8 sig;
        str8 ppid;
        str8 ppToken;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u64>::save(_vobj, "handle", handle);
            PacketDataHelper<unsigned int>::save(_vobj, "timestamp", timestamp);
            PacketDataHelper<str8>::save(_vobj, "appId", appId);
            PacketDataHelper<str8>::save(_vobj, "sig", sig);
            PacketDataHelper<str8>::save(_vobj, "ppid", ppid);
            PacketDataHelper<str8>::save(_vobj, "ppToken", ppToken);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u64>::load(_vobj, "handle", handle);
            PacketDataHelper<unsigned int>::load(_vobj, "timestamp", timestamp);
            PacketDataHelper<str8>::load(_vobj, "appId", appId);
            PacketDataHelper<str8>::load(_vobj, "sig", sig);
            PacketDataHelper<str8>::load(_vobj, "ppid", ppid);
            PacketDataHelper<str8>::load(_vobj, "ppToken", ppToken);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.handle;
        s << DataStream::ccu(v.timestamp);
        s << v.appId;
        s << v.sig;
        s << v.ppid;
        s << v.ppToken;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.handle;
        s >> DataStream::cu(v.timestamp);
        s >> v.appId;
        s >> v.sig;
        s >> v.ppid;
        s >> v.ppToken;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_GetFriendDetail : public Packet {
public:
    enum { ID = 311 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u64 handle;
        unsigned int timestamp;
        str8 appId;
        str8 sig;
        str8 ppid;
        str8 ppToken;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u64>::save(_vobj, "handle", handle);
            PacketDataHelper<unsigned int>::save(_vobj, "timestamp", timestamp);
            PacketDataHelper<str8>::save(_vobj, "appId", appId);
            PacketDataHelper<str8>::save(_vobj, "sig", sig);
            PacketDataHelper<str8>::save(_vobj, "ppid", ppid);
            PacketDataHelper<str8>::save(_vobj, "ppToken", ppToken);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u64>::load(_vobj, "handle", handle);
            PacketDataHelper<unsigned int>::load(_vobj, "timestamp", timestamp);
            PacketDataHelper<str8>::load(_vobj, "appId", appId);
            PacketDataHelper<str8>::load(_vobj, "sig", sig);
            PacketDataHelper<str8>::load(_vobj, "ppid", ppid);
            PacketDataHelper<str8>::load(_vobj, "ppToken", ppToken);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.handle;
        s << DataStream::ccu(v.timestamp);
        s << v.appId;
        s << v.sig;
        s << v.ppid;
        s << v.ppToken;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.handle;
        s >> DataStream::cu(v.timestamp);
        s >> v.appId;
        s >> v.sig;
        s >> v.ppid;
        s >> v.ppToken;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_GetStrangerDetail : public Packet {
public:
    enum { ID = 312 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u64 handle;
        unsigned int timestamp;
        str8 appId;
        str8 sig;
        str8 ppid;
        str8 ppToken;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u64>::save(_vobj, "handle", handle);
            PacketDataHelper<unsigned int>::save(_vobj, "timestamp", timestamp);
            PacketDataHelper<str8>::save(_vobj, "appId", appId);
            PacketDataHelper<str8>::save(_vobj, "sig", sig);
            PacketDataHelper<str8>::save(_vobj, "ppid", ppid);
            PacketDataHelper<str8>::save(_vobj, "ppToken", ppToken);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u64>::load(_vobj, "handle", handle);
            PacketDataHelper<unsigned int>::load(_vobj, "timestamp", timestamp);
            PacketDataHelper<str8>::load(_vobj, "appId", appId);
            PacketDataHelper<str8>::load(_vobj, "sig", sig);
            PacketDataHelper<str8>::load(_vobj, "ppid", ppid);
            PacketDataHelper<str8>::load(_vobj, "ppToken", ppToken);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.handle;
        s << DataStream::ccu(v.timestamp);
        s << v.appId;
        s << v.sig;
        s << v.ppid;
        s << v.ppToken;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.handle;
        s >> DataStream::cu(v.timestamp);
        s >> v.appId;
        s >> v.sig;
        s >> v.ppid;
        s >> v.ppToken;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_UpdScore : public Packet {
public:
    enum { ID = 313 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u64 handle;
        unsigned int timestamp;
        str8 appId;
        str8 sig;
        str8 ppid;
        str8 ppToken;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u64>::save(_vobj, "handle", handle);
            PacketDataHelper<unsigned int>::save(_vobj, "timestamp", timestamp);
            PacketDataHelper<str8>::save(_vobj, "appId", appId);
            PacketDataHelper<str8>::save(_vobj, "sig", sig);
            PacketDataHelper<str8>::save(_vobj, "ppid", ppid);
            PacketDataHelper<str8>::save(_vobj, "ppToken", ppToken);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u64>::load(_vobj, "handle", handle);
            PacketDataHelper<unsigned int>::load(_vobj, "timestamp", timestamp);
            PacketDataHelper<str8>::load(_vobj, "appId", appId);
            PacketDataHelper<str8>::load(_vobj, "sig", sig);
            PacketDataHelper<str8>::load(_vobj, "ppid", ppid);
            PacketDataHelper<str8>::load(_vobj, "ppToken", ppToken);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.handle;
        s << DataStream::ccu(v.timestamp);
        s << v.appId;
        s << v.sig;
        s << v.ppid;
        s << v.ppToken;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.handle;
        s >> DataStream::cu(v.timestamp);
        s >> v.appId;
        s >> v.sig;
        s >> v.ppid;
        s >> v.ppToken;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_FeedNotify : public Packet {
public:
    enum { ID = 314 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u64 handle;
        unsigned int timestamp;
        str8 appId;
        str8 sig;
        str8 ppid;
        str8 ppToken;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u64>::save(_vobj, "handle", handle);
            PacketDataHelper<unsigned int>::save(_vobj, "timestamp", timestamp);
            PacketDataHelper<str8>::save(_vobj, "appId", appId);
            PacketDataHelper<str8>::save(_vobj, "sig", sig);
            PacketDataHelper<str8>::save(_vobj, "ppid", ppid);
            PacketDataHelper<str8>::save(_vobj, "ppToken", ppToken);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u64>::load(_vobj, "handle", handle);
            PacketDataHelper<unsigned int>::load(_vobj, "timestamp", timestamp);
            PacketDataHelper<str8>::load(_vobj, "appId", appId);
            PacketDataHelper<str8>::load(_vobj, "sig", sig);
            PacketDataHelper<str8>::load(_vobj, "ppid", ppid);
            PacketDataHelper<str8>::load(_vobj, "ppToken", ppToken);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.handle;
        s << DataStream::ccu(v.timestamp);
        s << v.appId;
        s << v.sig;
        s << v.ppid;
        s << v.ppToken;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.handle;
        s >> DataStream::cu(v.timestamp);
        s >> v.appId;
        s >> v.sig;
        s >> v.ppid;
        s >> v.ppToken;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req__PF_ResetNickname : public Packet {
public:
    enum { ID = 315 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u64 handle;
        unsigned int timestamp;
        str8 appId;
        str8 ppid;
        str8 nickname;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u64>::save(_vobj, "handle", handle);
            PacketDataHelper<unsigned int>::save(_vobj, "timestamp", timestamp);
            PacketDataHelper<str8>::save(_vobj, "appId", appId);
            PacketDataHelper<str8>::save(_vobj, "ppid", ppid);
            PacketDataHelper<str8>::save(_vobj, "nickname", nickname);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u64>::load(_vobj, "handle", handle);
            PacketDataHelper<unsigned int>::load(_vobj, "timestamp", timestamp);
            PacketDataHelper<str8>::load(_vobj, "appId", appId);
            PacketDataHelper<str8>::load(_vobj, "ppid", ppid);
            PacketDataHelper<str8>::load(_vobj, "nickname", nickname);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.handle;
        s << DataStream::ccu(v.timestamp);
        s << v.appId;
        s << v.ppid;
        s << v.nickname;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.handle;
        s >> DataStream::cu(v.timestamp);
        s >> v.appId;
        s >> v.ppid;
        s >> v.nickname;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
