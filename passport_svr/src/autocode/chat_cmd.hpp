// generated by pktcoder.
struct GagInfo {
    u64 ppid;
    str8 NickName;
    bool Isforever;
    u64 GagTime;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<u64>::save(_vobj, "ppid", ppid);
        PacketDataHelper<str8>::save(_vobj, "NickName", NickName);
        PacketDataHelper<bool>::save(_vobj, "Isforever", Isforever);
        PacketDataHelper<u64>::save(_vobj, "GagTime", GagTime);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<u64>::load(_vobj, "ppid", ppid);
        PacketDataHelper<str8>::load(_vobj, "NickName", NickName);
        PacketDataHelper<bool>::load(_vobj, "Isforever", Isforever);
        PacketDataHelper<u64>::load(_vobj, "GagTime", GagTime);
    }
};
inline DataStream & operator <<(DataStream &s, const GagInfo &v) {
    s << v.ppid;
    s << v.NickName;
    s << v.Isforever;
    s << v.GagTime;
    return s;
}
inline DataStream & operator >>(DataStream &s, GagInfo &v) {
    s >> v.ppid;
    s >> v.NickName;
    s >> v.Isforever;
    s >> v.GagTime;
    return s;
}
class req_Gag : public Packet {
public:
    enum { ID = 500 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u64 ppid;
        u64 GagTime;
        str8 Reason;
        unsigned int Source;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u64>::save(_vobj, "ppid", ppid);
            PacketDataHelper<u64>::save(_vobj, "GagTime", GagTime);
            PacketDataHelper<str8>::save(_vobj, "Reason", Reason);
            PacketDataHelper<unsigned int>::save(_vobj, "Source", Source);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u64>::load(_vobj, "ppid", ppid);
            PacketDataHelper<u64>::load(_vobj, "GagTime", GagTime);
            PacketDataHelper<str8>::load(_vobj, "Reason", Reason);
            PacketDataHelper<unsigned int>::load(_vobj, "Source", Source);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.ppid;
        s << v.GagTime;
        s << v.Reason;
        s << DataStream::ccu(v.Source);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.ppid;
        s >> v.GagTime;
        s >> v.Reason;
        s >> DataStream::cu(v.Source);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_Gag : public Packet {
public:
    enum { ID = 501 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int RetCode;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "RetCode", RetCode);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "RetCode", RetCode);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.RetCode);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.RetCode);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_RemoveGag : public Packet {
public:
    enum { ID = 502 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u64 ppid;
        str8 Reason;
        unsigned int Source;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u64>::save(_vobj, "ppid", ppid);
            PacketDataHelper<str8>::save(_vobj, "Reason", Reason);
            PacketDataHelper<unsigned int>::save(_vobj, "Source", Source);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u64>::load(_vobj, "ppid", ppid);
            PacketDataHelper<str8>::load(_vobj, "Reason", Reason);
            PacketDataHelper<unsigned int>::load(_vobj, "Source", Source);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.ppid;
        s << v.Reason;
        s << DataStream::ccu(v.Source);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.ppid;
        s >> v.Reason;
        s >> DataStream::cu(v.Source);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_RemoveGag : public Packet {
public:
    enum { ID = 503 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int RetCode;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "RetCode", RetCode);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "RetCode", RetCode);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.RetCode);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.RetCode);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_GetGagList : public Packet {
public:
    enum { ID = 504 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int Index;
        unsigned int Count;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "Index", Index);
            PacketDataHelper<unsigned int>::save(_vobj, "Count", Count);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "Index", Index);
            PacketDataHelper<unsigned int>::load(_vobj, "Count", Count);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.Index);
        s << DataStream::ccu(v.Count);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.Index);
        s >> DataStream::cu(v.Count);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_GetGagList : public Packet {
public:
    enum { ID = 505 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int RetCode;
        std::vector<GagInfo> GagList;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "RetCode", RetCode);
            PacketDataHelper<GagInfo>::save(_vobj, "GagList", GagList);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "RetCode", RetCode);
            PacketDataHelper<GagInfo>::load(_vobj, "GagList", GagList);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.RetCode);
        s << DataStream::ccu(v.GagList.size());
        for (auto &i : v.GagList) s << i;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        size_t c; (void)c;
        s >> DataStream::cu(v.RetCode);
        s >> DataStream::cu(c);
        v.GagList.resize(c);
        for (auto &i : v.GagList) s >> i;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
template <class _Handler>
void _reg_chat_cmd_requests() {
    auto &_ins = PacketFactory<_Handler>::instance();
    _ins.registerRequestNoProcess<req_Gag>();
    _ins.registerRequestNoProcess<req_RemoveGag>();
    _ins.registerRequestNoProcess<req_GetGagList>();
}
template <class _Handler>
void _reg_chat_cmd_responses() {
    auto &_ins = PacketFactory<_Handler>::instance();
    _ins.registerResponseNoProcess<res_Gag>();
    _ins.registerResponseNoProcess<res_RemoveGag>();
    _ins.registerResponseNoProcess<res_GetGagList>();
}
