// generated by pktcoder.
struct UserId {
    u64 low;
    u64 high;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<u64>::save(_vobj, "low", low);
        PacketDataHelper<u64>::save(_vobj, "high", high);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<u64>::load(_vobj, "low", low);
        PacketDataHelper<u64>::load(_vobj, "high", high);
    }
};
inline DataStream & operator <<(DataStream &s, const UserId &v) {
    s << v.low;
    s << v.high;
    return s;
}
inline DataStream & operator >>(DataStream &s, UserId &v) {
    s >> v.low;
    s >> v.high;
    return s;
}
struct IndexAndCount {
    unsigned int index;
    unsigned int count;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<unsigned int>::save(_vobj, "index", index);
        PacketDataHelper<unsigned int>::save(_vobj, "count", count);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<unsigned int>::load(_vobj, "index", index);
        PacketDataHelper<unsigned int>::load(_vobj, "count", count);
    }
};
inline DataStream & operator <<(DataStream &s, const IndexAndCount &v) {
    s << DataStream::ccu(v.index);
    s << DataStream::ccu(v.count);
    return s;
}
inline DataStream & operator >>(DataStream &s, IndexAndCount &v) {
    s >> DataStream::cu(v.index);
    s >> DataStream::cu(v.count);
    return s;
}
struct Msg_BaseInfo {
    int money;
    int diamond;
    int chip1;
    int chip2;
    int chip3;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<int>::save(_vobj, "money", money);
        PacketDataHelper<int>::save(_vobj, "diamond", diamond);
        PacketDataHelper<int>::save(_vobj, "chip1", chip1);
        PacketDataHelper<int>::save(_vobj, "chip2", chip2);
        PacketDataHelper<int>::save(_vobj, "chip3", chip3);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<int>::load(_vobj, "money", money);
        PacketDataHelper<int>::load(_vobj, "diamond", diamond);
        PacketDataHelper<int>::load(_vobj, "chip1", chip1);
        PacketDataHelper<int>::load(_vobj, "chip2", chip2);
        PacketDataHelper<int>::load(_vobj, "chip3", chip3);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_BaseInfo &v) {
    s << DataStream::cci(v.money);
    s << DataStream::cci(v.diamond);
    s << DataStream::cci(v.chip1);
    s << DataStream::cci(v.chip2);
    s << DataStream::cci(v.chip3);
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_BaseInfo &v) {
    s >> DataStream::ci(v.money);
    s >> DataStream::ci(v.diamond);
    s >> DataStream::ci(v.chip1);
    s >> DataStream::ci(v.chip2);
    s >> DataStream::ci(v.chip3);
    return s;
}
struct Msg_TowerIndex {
    unsigned int cls;
    unsigned int idx;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<unsigned int>::save(_vobj, "cls", cls);
        PacketDataHelper<unsigned int>::save(_vobj, "idx", idx);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<unsigned int>::load(_vobj, "cls", cls);
        PacketDataHelper<unsigned int>::load(_vobj, "idx", idx);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_TowerIndex &v) {
    s << DataStream::ccu(v.cls);
    s << DataStream::ccu(v.idx);
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_TowerIndex &v) {
    s >> DataStream::cu(v.cls);
    s >> DataStream::cu(v.idx);
    return s;
}
struct Msg_Tower {
    unsigned int cls;
    unsigned int idx;
    unsigned int count;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<unsigned int>::save(_vobj, "cls", cls);
        PacketDataHelper<unsigned int>::save(_vobj, "idx", idx);
        PacketDataHelper<unsigned int>::save(_vobj, "count", count);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<unsigned int>::load(_vobj, "cls", cls);
        PacketDataHelper<unsigned int>::load(_vobj, "idx", idx);
        PacketDataHelper<unsigned int>::load(_vobj, "count", count);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_Tower &v) {
    s << DataStream::ccu(v.cls);
    s << DataStream::ccu(v.idx);
    s << DataStream::ccu(v.count);
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_Tower &v) {
    s >> DataStream::cu(v.cls);
    s >> DataStream::cu(v.idx);
    s >> DataStream::cu(v.count);
    return s;
}
struct Msg_LevelData {
    unsigned int id;
    unsigned int starNum;
    int score;
    bool shovel;
    bool watch;
    bool intrusion;
    unsigned int intrusionTimes;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<unsigned int>::save(_vobj, "id", id);
        PacketDataHelper<unsigned int>::save(_vobj, "starNum", starNum);
        PacketDataHelper<int>::save(_vobj, "score", score);
        PacketDataHelper<bool>::save(_vobj, "shovel", shovel);
        PacketDataHelper<bool>::save(_vobj, "watch", watch);
        PacketDataHelper<bool>::save(_vobj, "intrusion", intrusion);
        PacketDataHelper<unsigned int>::save(_vobj, "intrusionTimes", intrusionTimes);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<unsigned int>::load(_vobj, "id", id);
        PacketDataHelper<unsigned int>::load(_vobj, "starNum", starNum);
        PacketDataHelper<int>::load(_vobj, "score", score);
        PacketDataHelper<bool>::load(_vobj, "shovel", shovel);
        PacketDataHelper<bool>::load(_vobj, "watch", watch);
        PacketDataHelper<bool>::load(_vobj, "intrusion", intrusion);
        PacketDataHelper<unsigned int>::load(_vobj, "intrusionTimes", intrusionTimes);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_LevelData &v) {
    s << DataStream::ccu(v.id);
    s << DataStream::ccu(v.starNum);
    s << DataStream::cci(v.score);
    s << v.shovel;
    s << v.watch;
    s << v.intrusion;
    s << DataStream::ccu(v.intrusionTimes);
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_LevelData &v) {
    s >> DataStream::cu(v.id);
    s >> DataStream::cu(v.starNum);
    s >> DataStream::ci(v.score);
    s >> v.shovel;
    s >> v.watch;
    s >> v.intrusion;
    s >> DataStream::cu(v.intrusionTimes);
    return s;
}
struct Msg_GroupLevelData {
    unsigned int id;
    u8 passed;
    unsigned int stars;
    int score;
    bool shovel;
    bool watch;
    bool resolved;
    std::vector<unsigned int> heroes;
    std::vector<IndexAndCount> towers;
    std::vector<IndexAndCount> platforms;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<unsigned int>::save(_vobj, "id", id);
        PacketDataHelper<u8>::save(_vobj, "passed", passed);
        PacketDataHelper<unsigned int>::save(_vobj, "stars", stars);
        PacketDataHelper<int>::save(_vobj, "score", score);
        PacketDataHelper<bool>::save(_vobj, "shovel", shovel);
        PacketDataHelper<bool>::save(_vobj, "watch", watch);
        PacketDataHelper<bool>::save(_vobj, "resolved", resolved);
        PacketDataHelper<unsigned int>::save(_vobj, "heroes", heroes);
        PacketDataHelper<IndexAndCount>::save(_vobj, "towers", towers);
        PacketDataHelper<IndexAndCount>::save(_vobj, "platforms", platforms);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<unsigned int>::load(_vobj, "id", id);
        PacketDataHelper<u8>::load(_vobj, "passed", passed);
        PacketDataHelper<unsigned int>::load(_vobj, "stars", stars);
        PacketDataHelper<int>::load(_vobj, "score", score);
        PacketDataHelper<bool>::load(_vobj, "shovel", shovel);
        PacketDataHelper<bool>::load(_vobj, "watch", watch);
        PacketDataHelper<bool>::load(_vobj, "resolved", resolved);
        PacketDataHelper<unsigned int>::load(_vobj, "heroes", heroes);
        PacketDataHelper<IndexAndCount>::load(_vobj, "towers", towers);
        PacketDataHelper<IndexAndCount>::load(_vobj, "platforms", platforms);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_GroupLevelData &v) {
    s << DataStream::ccu(v.id);
    s << v.passed;
    s << DataStream::ccu(v.stars);
    s << DataStream::cci(v.score);
    s << v.shovel;
    s << v.watch;
    s << v.resolved;
    s << DataStream::ccu(v.heroes.size());
    for (auto &i : v.heroes) s << DataStream::ccu(i);
    s << DataStream::ccu(v.towers.size());
    for (auto &i : v.towers) s << i;
    s << DataStream::ccu(v.platforms.size());
    for (auto &i : v.platforms) s << i;
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_GroupLevelData &v) {
    size_t c; (void)c;
    s >> DataStream::cu(v.id);
    s >> v.passed;
    s >> DataStream::cu(v.stars);
    s >> DataStream::ci(v.score);
    s >> v.shovel;
    s >> v.watch;
    s >> v.resolved;
    s >> DataStream::cu(c);
    v.heroes.resize(c);
    for (auto &i : v.heroes) s >> DataStream::cu(i);
    s >> DataStream::cu(c);
    v.towers.resize(c);
    for (auto &i : v.towers) s >> i;
    s >> DataStream::cu(c);
    v.platforms.resize(c);
    for (auto &i : v.platforms) s >> i;
    return s;
}
struct Msg_GroupData {
    unsigned int groupId;
    std::vector<Msg_GroupLevelData> levels;
    bool passed;
    unsigned int rewards;
    unsigned int intrusionTimes;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<unsigned int>::save(_vobj, "groupId", groupId);
        PacketDataHelper<Msg_GroupLevelData>::save(_vobj, "levels", levels);
        PacketDataHelper<bool>::save(_vobj, "passed", passed);
        PacketDataHelper<unsigned int>::save(_vobj, "rewards", rewards);
        PacketDataHelper<unsigned int>::save(_vobj, "intrusionTimes", intrusionTimes);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<unsigned int>::load(_vobj, "groupId", groupId);
        PacketDataHelper<Msg_GroupLevelData>::load(_vobj, "levels", levels);
        PacketDataHelper<bool>::load(_vobj, "passed", passed);
        PacketDataHelper<unsigned int>::load(_vobj, "rewards", rewards);
        PacketDataHelper<unsigned int>::load(_vobj, "intrusionTimes", intrusionTimes);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_GroupData &v) {
    s << DataStream::ccu(v.groupId);
    s << DataStream::ccu(v.levels.size());
    for (auto &i : v.levels) s << i;
    s << v.passed;
    s << DataStream::ccu(v.rewards);
    s << DataStream::ccu(v.intrusionTimes);
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_GroupData &v) {
    size_t c; (void)c;
    s >> DataStream::cu(v.groupId);
    s >> DataStream::cu(c);
    v.levels.resize(c);
    for (auto &i : v.levels) s >> i;
    s >> v.passed;
    s >> DataStream::cu(v.rewards);
    s >> DataStream::cu(v.intrusionTimes);
    return s;
}
struct Msg_LevelVictory {
    unsigned int id;
    unsigned int stars;
    int score;
    bool shovel;
    bool watch;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<unsigned int>::save(_vobj, "id", id);
        PacketDataHelper<unsigned int>::save(_vobj, "stars", stars);
        PacketDataHelper<int>::save(_vobj, "score", score);
        PacketDataHelper<bool>::save(_vobj, "shovel", shovel);
        PacketDataHelper<bool>::save(_vobj, "watch", watch);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<unsigned int>::load(_vobj, "id", id);
        PacketDataHelper<unsigned int>::load(_vobj, "stars", stars);
        PacketDataHelper<int>::load(_vobj, "score", score);
        PacketDataHelper<bool>::load(_vobj, "shovel", shovel);
        PacketDataHelper<bool>::load(_vobj, "watch", watch);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_LevelVictory &v) {
    s << DataStream::ccu(v.id);
    s << DataStream::ccu(v.stars);
    s << DataStream::cci(v.score);
    s << v.shovel;
    s << v.watch;
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_LevelVictory &v) {
    s >> DataStream::cu(v.id);
    s >> DataStream::cu(v.stars);
    s >> DataStream::ci(v.score);
    s >> v.shovel;
    s >> v.watch;
    return s;
}
struct Msg_GroupLevelVictory {
    Msg_LevelVictory data;
    std::vector<unsigned int> heroes;
    std::vector<IndexAndCount> towers;
    std::vector<IndexAndCount> platforms;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<Msg_LevelVictory>::save(_vobj, "data", data);
        PacketDataHelper<unsigned int>::save(_vobj, "heroes", heroes);
        PacketDataHelper<IndexAndCount>::save(_vobj, "towers", towers);
        PacketDataHelper<IndexAndCount>::save(_vobj, "platforms", platforms);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<Msg_LevelVictory>::load(_vobj, "data", data);
        PacketDataHelper<unsigned int>::load(_vobj, "heroes", heroes);
        PacketDataHelper<IndexAndCount>::load(_vobj, "towers", towers);
        PacketDataHelper<IndexAndCount>::load(_vobj, "platforms", platforms);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_GroupLevelVictory &v) {
    s << v.data;
    s << DataStream::ccu(v.heroes.size());
    for (auto &i : v.heroes) s << DataStream::ccu(i);
    s << DataStream::ccu(v.towers.size());
    for (auto &i : v.towers) s << i;
    s << DataStream::ccu(v.platforms.size());
    for (auto &i : v.platforms) s << i;
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_GroupLevelVictory &v) {
    size_t c; (void)c;
    s >> v.data;
    s >> DataStream::cu(c);
    v.heroes.resize(c);
    for (auto &i : v.heroes) s >> DataStream::cu(i);
    s >> DataStream::cu(c);
    v.towers.resize(c);
    for (auto &i : v.towers) s >> i;
    s >> DataStream::cu(c);
    v.platforms.resize(c);
    for (auto &i : v.platforms) s >> i;
    return s;
}
struct Msg_LevelOfGoldMine {
    unsigned int id;
    unsigned int intrusionTimes;
    unsigned int status;
    f32 yield;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<unsigned int>::save(_vobj, "id", id);
        PacketDataHelper<unsigned int>::save(_vobj, "intrusionTimes", intrusionTimes);
        PacketDataHelper<unsigned int>::save(_vobj, "status", status);
        PacketDataHelper<f32>::save(_vobj, "yield", yield);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<unsigned int>::load(_vobj, "id", id);
        PacketDataHelper<unsigned int>::load(_vobj, "intrusionTimes", intrusionTimes);
        PacketDataHelper<unsigned int>::load(_vobj, "status", status);
        PacketDataHelper<f32>::load(_vobj, "yield", yield);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_LevelOfGoldMine &v) {
    s << DataStream::ccu(v.id);
    s << DataStream::ccu(v.intrusionTimes);
    s << DataStream::ccu(v.status);
    s << v.yield;
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_LevelOfGoldMine &v) {
    s >> DataStream::cu(v.id);
    s >> DataStream::cu(v.intrusionTimes);
    s >> DataStream::cu(v.status);
    s >> v.yield;
    return s;
}
struct Msg_GoldMine {
    unsigned int id;
    unsigned int nowNum;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<unsigned int>::save(_vobj, "id", id);
        PacketDataHelper<unsigned int>::save(_vobj, "nowNum", nowNum);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<unsigned int>::load(_vobj, "id", id);
        PacketDataHelper<unsigned int>::load(_vobj, "nowNum", nowNum);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_GoldMine &v) {
    s << DataStream::ccu(v.id);
    s << DataStream::ccu(v.nowNum);
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_GoldMine &v) {
    s >> DataStream::cu(v.id);
    s >> DataStream::cu(v.nowNum);
    return s;
}
struct Msg_Rune {
    unsigned int id;
    unsigned int status;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<unsigned int>::save(_vobj, "id", id);
        PacketDataHelper<unsigned int>::save(_vobj, "status", status);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<unsigned int>::load(_vobj, "id", id);
        PacketDataHelper<unsigned int>::load(_vobj, "status", status);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_Rune &v) {
    s << DataStream::ccu(v.id);
    s << DataStream::ccu(v.status);
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_Rune &v) {
    s >> DataStream::cu(v.id);
    s >> DataStream::cu(v.status);
    return s;
}
struct Msg_Hero {
    unsigned int id;
    unsigned int towerClass;
    unsigned int unlockRes;
    unsigned int status;
    std::vector<Msg_Rune> runeList;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<unsigned int>::save(_vobj, "id", id);
        PacketDataHelper<unsigned int>::save(_vobj, "towerClass", towerClass);
        PacketDataHelper<unsigned int>::save(_vobj, "unlockRes", unlockRes);
        PacketDataHelper<unsigned int>::save(_vobj, "status", status);
        PacketDataHelper<Msg_Rune>::save(_vobj, "runeList", runeList);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<unsigned int>::load(_vobj, "id", id);
        PacketDataHelper<unsigned int>::load(_vobj, "towerClass", towerClass);
        PacketDataHelper<unsigned int>::load(_vobj, "unlockRes", unlockRes);
        PacketDataHelper<unsigned int>::load(_vobj, "status", status);
        PacketDataHelper<Msg_Rune>::load(_vobj, "runeList", runeList);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_Hero &v) {
    s << DataStream::ccu(v.id);
    s << DataStream::ccu(v.towerClass);
    s << DataStream::ccu(v.unlockRes);
    s << DataStream::ccu(v.status);
    s << DataStream::ccu(v.runeList.size());
    for (auto &i : v.runeList) s << i;
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_Hero &v) {
    size_t c; (void)c;
    s >> DataStream::cu(v.id);
    s >> DataStream::cu(v.towerClass);
    s >> DataStream::cu(v.unlockRes);
    s >> DataStream::cu(v.status);
    s >> DataStream::cu(c);
    v.runeList.resize(c);
    for (auto &i : v.runeList) s >> i;
    return s;
}
struct Msg_UnlockRune {
    unsigned int idx;
    unsigned int runeIdx;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<unsigned int>::save(_vobj, "idx", idx);
        PacketDataHelper<unsigned int>::save(_vobj, "runeIdx", runeIdx);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<unsigned int>::load(_vobj, "idx", idx);
        PacketDataHelper<unsigned int>::load(_vobj, "runeIdx", runeIdx);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_UnlockRune &v) {
    s << DataStream::ccu(v.idx);
    s << DataStream::ccu(v.runeIdx);
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_UnlockRune &v) {
    s >> DataStream::cu(v.idx);
    s >> DataStream::cu(v.runeIdx);
    return s;
}
struct Msg_GoldMineCollect {
    unsigned int id;
    unsigned int num;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<unsigned int>::save(_vobj, "id", id);
        PacketDataHelper<unsigned int>::save(_vobj, "num", num);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<unsigned int>::load(_vobj, "id", id);
        PacketDataHelper<unsigned int>::load(_vobj, "num", num);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_GoldMineCollect &v) {
    s << DataStream::ccu(v.id);
    s << DataStream::ccu(v.num);
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_GoldMineCollect &v) {
    s >> DataStream::cu(v.id);
    s >> DataStream::cu(v.num);
    return s;
}
struct Msg_TimedData {
    std::vector<Msg_GoldMine> goldMineList;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<Msg_GoldMine>::save(_vobj, "goldMineList", goldMineList);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<Msg_GoldMine>::load(_vobj, "goldMineList", goldMineList);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_TimedData &v) {
    s << DataStream::ccu(v.goldMineList.size());
    for (auto &i : v.goldMineList) s << i;
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_TimedData &v) {
    size_t c; (void)c;
    s >> DataStream::cu(c);
    v.goldMineList.resize(c);
    for (auto &i : v.goldMineList) s >> i;
    return s;
}
struct Msg_BeginBattleInfo {
    unsigned int stamp;
    unsigned int levelId;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<unsigned int>::save(_vobj, "stamp", stamp);
        PacketDataHelper<unsigned int>::save(_vobj, "levelId", levelId);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<unsigned int>::load(_vobj, "stamp", stamp);
        PacketDataHelper<unsigned int>::load(_vobj, "levelId", levelId);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_BeginBattleInfo &v) {
    s << DataStream::ccu(v.stamp);
    s << DataStream::ccu(v.levelId);
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_BeginBattleInfo &v) {
    s >> DataStream::cu(v.stamp);
    s >> DataStream::cu(v.levelId);
    return s;
}
struct Msg_Item {
    unsigned int id;
    unsigned int count;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<unsigned int>::save(_vobj, "id", id);
        PacketDataHelper<unsigned int>::save(_vobj, "count", count);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<unsigned int>::load(_vobj, "id", id);
        PacketDataHelper<unsigned int>::load(_vobj, "count", count);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_Item &v) {
    s << DataStream::ccu(v.id);
    s << DataStream::ccu(v.count);
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_Item &v) {
    s >> DataStream::cu(v.id);
    s >> DataStream::cu(v.count);
    return s;
}
struct Msg_Product {
    unsigned int id;
    unsigned int price;
    unsigned int count;
    str8 name;
    str8 desc;
    str8 orderId;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<unsigned int>::save(_vobj, "id", id);
        PacketDataHelper<unsigned int>::save(_vobj, "price", price);
        PacketDataHelper<unsigned int>::save(_vobj, "count", count);
        PacketDataHelper<str8>::save(_vobj, "name", name);
        PacketDataHelper<str8>::save(_vobj, "desc", desc);
        PacketDataHelper<str8>::save(_vobj, "orderId", orderId);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<unsigned int>::load(_vobj, "id", id);
        PacketDataHelper<unsigned int>::load(_vobj, "price", price);
        PacketDataHelper<unsigned int>::load(_vobj, "count", count);
        PacketDataHelper<str8>::load(_vobj, "name", name);
        PacketDataHelper<str8>::load(_vobj, "desc", desc);
        PacketDataHelper<str8>::load(_vobj, "orderId", orderId);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_Product &v) {
    s << DataStream::ccu(v.id);
    s << DataStream::ccu(v.price);
    s << DataStream::ccu(v.count);
    s << v.name;
    s << v.desc;
    s << v.orderId;
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_Product &v) {
    s >> DataStream::cu(v.id);
    s >> DataStream::cu(v.price);
    s >> DataStream::cu(v.count);
    s >> v.name;
    s >> v.desc;
    s >> v.orderId;
    return s;
}
struct Msg_Monster {
    unsigned int id;
    bool isMeet;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<unsigned int>::save(_vobj, "id", id);
        PacketDataHelper<bool>::save(_vobj, "isMeet", isMeet);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<unsigned int>::load(_vobj, "id", id);
        PacketDataHelper<bool>::load(_vobj, "isMeet", isMeet);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_Monster &v) {
    s << DataStream::ccu(v.id);
    s << v.isMeet;
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_Monster &v) {
    s >> DataStream::cu(v.id);
    s >> v.isMeet;
    return s;
}
struct Msg_MissionRewardInfo {
    unsigned int id;
    bool get;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<unsigned int>::save(_vobj, "id", id);
        PacketDataHelper<bool>::save(_vobj, "get", get);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<unsigned int>::load(_vobj, "id", id);
        PacketDataHelper<bool>::load(_vobj, "get", get);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_MissionRewardInfo &v) {
    s << DataStream::ccu(v.id);
    s << v.get;
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_MissionRewardInfo &v) {
    s >> DataStream::cu(v.id);
    s >> v.get;
    return s;
}
struct Msg_Date {
    unsigned int year;
    unsigned int month;
    unsigned int day;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<unsigned int>::save(_vobj, "year", year);
        PacketDataHelper<unsigned int>::save(_vobj, "month", month);
        PacketDataHelper<unsigned int>::save(_vobj, "day", day);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<unsigned int>::load(_vobj, "year", year);
        PacketDataHelper<unsigned int>::load(_vobj, "month", month);
        PacketDataHelper<unsigned int>::load(_vobj, "day", day);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_Date &v) {
    s << DataStream::ccu(v.year);
    s << DataStream::ccu(v.month);
    s << DataStream::ccu(v.day);
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_Date &v) {
    s >> DataStream::cu(v.year);
    s >> DataStream::cu(v.month);
    s >> DataStream::cu(v.day);
    return s;
}
struct Msg_RegistrationData {
    bool complete;
    unsigned int leftDay;
    unsigned int nums;
    unsigned int groups;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<bool>::save(_vobj, "complete", complete);
        PacketDataHelper<unsigned int>::save(_vobj, "leftDay", leftDay);
        PacketDataHelper<unsigned int>::save(_vobj, "nums", nums);
        PacketDataHelper<unsigned int>::save(_vobj, "groups", groups);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<bool>::load(_vobj, "complete", complete);
        PacketDataHelper<unsigned int>::load(_vobj, "leftDay", leftDay);
        PacketDataHelper<unsigned int>::load(_vobj, "nums", nums);
        PacketDataHelper<unsigned int>::load(_vobj, "groups", groups);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_RegistrationData &v) {
    s << v.complete;
    s << DataStream::ccu(v.leftDay);
    s << DataStream::ccu(v.nums);
    s << DataStream::ccu(v.groups);
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_RegistrationData &v) {
    s >> v.complete;
    s >> DataStream::cu(v.leftDay);
    s >> DataStream::cu(v.nums);
    s >> DataStream::cu(v.groups);
    return s;
}
struct Msg_PlayerData {
    unsigned int stamp;
    Msg_BaseInfo baseInfo;
    std::vector<unsigned int> techList;
    std::vector<Msg_Tower> towerList;
    std::vector<Msg_LevelData> levelList;
    std::vector<Msg_Item> itemList;
    std::vector<Msg_Monster> monsterList;
    std::vector<unsigned int> disableList;
    std::vector<unsigned int> heroRes;
    std::vector<Msg_Hero> heroList;
    std::vector<unsigned int> platformList;
    std::vector<Msg_GroupData> groupList;
    std::vector<Msg_MissionRewardInfo> missionRewardList;
    Msg_TimedData timedData;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<unsigned int>::save(_vobj, "stamp", stamp);
        PacketDataHelper<Msg_BaseInfo>::save(_vobj, "baseInfo", baseInfo);
        PacketDataHelper<unsigned int>::save(_vobj, "techList", techList);
        PacketDataHelper<Msg_Tower>::save(_vobj, "towerList", towerList);
        PacketDataHelper<Msg_LevelData>::save(_vobj, "levelList", levelList);
        PacketDataHelper<Msg_Item>::save(_vobj, "itemList", itemList);
        PacketDataHelper<Msg_Monster>::save(_vobj, "monsterList", monsterList);
        PacketDataHelper<unsigned int>::save(_vobj, "disableList", disableList);
        PacketDataHelper<unsigned int>::save(_vobj, "heroRes", heroRes);
        PacketDataHelper<Msg_Hero>::save(_vobj, "heroList", heroList);
        PacketDataHelper<unsigned int>::save(_vobj, "platformList", platformList);
        PacketDataHelper<Msg_GroupData>::save(_vobj, "groupList", groupList);
        PacketDataHelper<Msg_MissionRewardInfo>::save(_vobj, "missionRewardList", missionRewardList);
        PacketDataHelper<Msg_TimedData>::save(_vobj, "timedData", timedData);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<unsigned int>::load(_vobj, "stamp", stamp);
        PacketDataHelper<Msg_BaseInfo>::load(_vobj, "baseInfo", baseInfo);
        PacketDataHelper<unsigned int>::load(_vobj, "techList", techList);
        PacketDataHelper<Msg_Tower>::load(_vobj, "towerList", towerList);
        PacketDataHelper<Msg_LevelData>::load(_vobj, "levelList", levelList);
        PacketDataHelper<Msg_Item>::load(_vobj, "itemList", itemList);
        PacketDataHelper<Msg_Monster>::load(_vobj, "monsterList", monsterList);
        PacketDataHelper<unsigned int>::load(_vobj, "disableList", disableList);
        PacketDataHelper<unsigned int>::load(_vobj, "heroRes", heroRes);
        PacketDataHelper<Msg_Hero>::load(_vobj, "heroList", heroList);
        PacketDataHelper<unsigned int>::load(_vobj, "platformList", platformList);
        PacketDataHelper<Msg_GroupData>::load(_vobj, "groupList", groupList);
        PacketDataHelper<Msg_MissionRewardInfo>::load(_vobj, "missionRewardList", missionRewardList);
        PacketDataHelper<Msg_TimedData>::load(_vobj, "timedData", timedData);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_PlayerData &v) {
    s << DataStream::ccu(v.stamp);
    s << v.baseInfo;
    s << DataStream::ccu(v.techList.size());
    for (auto &i : v.techList) s << DataStream::ccu(i);
    s << DataStream::ccu(v.towerList.size());
    for (auto &i : v.towerList) s << i;
    s << DataStream::ccu(v.levelList.size());
    for (auto &i : v.levelList) s << i;
    s << DataStream::ccu(v.itemList.size());
    for (auto &i : v.itemList) s << i;
    s << DataStream::ccu(v.monsterList.size());
    for (auto &i : v.monsterList) s << i;
    s << DataStream::ccu(v.disableList.size());
    for (auto &i : v.disableList) s << DataStream::ccu(i);
    s << DataStream::ccu(v.heroRes.size());
    for (auto &i : v.heroRes) s << DataStream::ccu(i);
    s << DataStream::ccu(v.heroList.size());
    for (auto &i : v.heroList) s << i;
    s << DataStream::ccu(v.platformList.size());
    for (auto &i : v.platformList) s << DataStream::ccu(i);
    s << DataStream::ccu(v.groupList.size());
    for (auto &i : v.groupList) s << i;
    s << DataStream::ccu(v.missionRewardList.size());
    for (auto &i : v.missionRewardList) s << i;
    s << v.timedData;
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_PlayerData &v) {
    size_t c; (void)c;
    s >> DataStream::cu(v.stamp);
    s >> v.baseInfo;
    s >> DataStream::cu(c);
    v.techList.resize(c);
    for (auto &i : v.techList) s >> DataStream::cu(i);
    s >> DataStream::cu(c);
    v.towerList.resize(c);
    for (auto &i : v.towerList) s >> i;
    s >> DataStream::cu(c);
    v.levelList.resize(c);
    for (auto &i : v.levelList) s >> i;
    s >> DataStream::cu(c);
    v.itemList.resize(c);
    for (auto &i : v.itemList) s >> i;
    s >> DataStream::cu(c);
    v.monsterList.resize(c);
    for (auto &i : v.monsterList) s >> i;
    s >> DataStream::cu(c);
    v.disableList.resize(c);
    for (auto &i : v.disableList) s >> DataStream::cu(i);
    s >> DataStream::cu(c);
    v.heroRes.resize(c);
    for (auto &i : v.heroRes) s >> DataStream::cu(i);
    s >> DataStream::cu(c);
    v.heroList.resize(c);
    for (auto &i : v.heroList) s >> i;
    s >> DataStream::cu(c);
    v.platformList.resize(c);
    for (auto &i : v.platformList) s >> DataStream::cu(i);
    s >> DataStream::cu(c);
    v.groupList.resize(c);
    for (auto &i : v.groupList) s >> i;
    s >> DataStream::cu(c);
    v.missionRewardList.resize(c);
    for (auto &i : v.missionRewardList) s >> i;
    s >> v.timedData;
    return s;
}
struct Msg_PlayerInitialData {
    UserId uid;
    Msg_PlayerData playerData;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<UserId>::save(_vobj, "uid", uid);
        PacketDataHelper<Msg_PlayerData>::save(_vobj, "playerData", playerData);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<UserId>::load(_vobj, "uid", uid);
        PacketDataHelper<Msg_PlayerData>::load(_vobj, "playerData", playerData);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_PlayerInitialData &v) {
    s << v.uid;
    s << v.playerData;
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_PlayerInitialData &v) {
    s >> v.uid;
    s >> v.playerData;
    return s;
}
struct Msg_BuyFailedInfo {
    unsigned int id;
    str8 orderId;
    str8 desc;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<unsigned int>::save(_vobj, "id", id);
        PacketDataHelper<str8>::save(_vobj, "orderId", orderId);
        PacketDataHelper<str8>::save(_vobj, "desc", desc);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<unsigned int>::load(_vobj, "id", id);
        PacketDataHelper<str8>::load(_vobj, "orderId", orderId);
        PacketDataHelper<str8>::load(_vobj, "desc", desc);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_BuyFailedInfo &v) {
    s << DataStream::ccu(v.id);
    s << v.orderId;
    s << v.desc;
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_BuyFailedInfo &v) {
    s >> DataStream::cu(v.id);
    s >> v.orderId;
    s >> v.desc;
    return s;
}
struct Msg_ProductContent {
    int diamond;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<int>::save(_vobj, "diamond", diamond);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<int>::load(_vobj, "diamond", diamond);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_ProductContent &v) {
    s << DataStream::cci(v.diamond);
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_ProductContent &v) {
    s >> DataStream::ci(v.diamond);
    return s;
}
struct Msg_Intrusion {
    unsigned int levelId;
    bool group;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<unsigned int>::save(_vobj, "levelId", levelId);
        PacketDataHelper<bool>::save(_vobj, "group", group);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<unsigned int>::load(_vobj, "levelId", levelId);
        PacketDataHelper<bool>::load(_vobj, "group", group);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_Intrusion &v) {
    s << DataStream::ccu(v.levelId);
    s << v.group;
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_Intrusion &v) {
    s >> DataStream::cu(v.levelId);
    s >> v.group;
    return s;
}
struct Msg_CouponBaseInfo {
    f32 validTime;
    unsigned int imageId;
    unsigned int subImageId;
    str8 title;
    str8 desc;
    unsigned int cost;
    unsigned int originalCost;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<f32>::save(_vobj, "validTime", validTime);
        PacketDataHelper<unsigned int>::save(_vobj, "imageId", imageId);
        PacketDataHelper<unsigned int>::save(_vobj, "subImageId", subImageId);
        PacketDataHelper<str8>::save(_vobj, "title", title);
        PacketDataHelper<str8>::save(_vobj, "desc", desc);
        PacketDataHelper<unsigned int>::save(_vobj, "cost", cost);
        PacketDataHelper<unsigned int>::save(_vobj, "originalCost", originalCost);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<f32>::load(_vobj, "validTime", validTime);
        PacketDataHelper<unsigned int>::load(_vobj, "imageId", imageId);
        PacketDataHelper<unsigned int>::load(_vobj, "subImageId", subImageId);
        PacketDataHelper<str8>::load(_vobj, "title", title);
        PacketDataHelper<str8>::load(_vobj, "desc", desc);
        PacketDataHelper<unsigned int>::load(_vobj, "cost", cost);
        PacketDataHelper<unsigned int>::load(_vobj, "originalCost", originalCost);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_CouponBaseInfo &v) {
    s << v.validTime;
    s << DataStream::ccu(v.imageId);
    s << DataStream::ccu(v.subImageId);
    s << v.title;
    s << v.desc;
    s << DataStream::ccu(v.cost);
    s << DataStream::ccu(v.originalCost);
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_CouponBaseInfo &v) {
    s >> v.validTime;
    s >> DataStream::cu(v.imageId);
    s >> DataStream::cu(v.subImageId);
    s >> v.title;
    s >> v.desc;
    s >> DataStream::cu(v.cost);
    s >> DataStream::cu(v.originalCost);
    return s;
}
struct Msg_CouponHero {
    Msg_CouponBaseInfo info;
    unsigned int heroClassId;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<Msg_CouponBaseInfo>::save(_vobj, "info", info);
        PacketDataHelper<unsigned int>::save(_vobj, "heroClassId", heroClassId);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<Msg_CouponBaseInfo>::load(_vobj, "info", info);
        PacketDataHelper<unsigned int>::load(_vobj, "heroClassId", heroClassId);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_CouponHero &v) {
    s << v.info;
    s << DataStream::ccu(v.heroClassId);
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_CouponHero &v) {
    s >> v.info;
    s >> DataStream::cu(v.heroClassId);
    return s;
}
struct Msg_CouponItems {
    Msg_CouponBaseInfo info;
    std::vector<Msg_Item> items;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<Msg_CouponBaseInfo>::save(_vobj, "info", info);
        PacketDataHelper<Msg_Item>::save(_vobj, "items", items);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<Msg_CouponBaseInfo>::load(_vobj, "info", info);
        PacketDataHelper<Msg_Item>::load(_vobj, "items", items);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_CouponItems &v) {
    s << v.info;
    s << DataStream::ccu(v.items.size());
    for (auto &i : v.items) s << i;
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_CouponItems &v) {
    size_t c; (void)c;
    s >> v.info;
    s >> DataStream::cu(c);
    v.items.resize(c);
    for (auto &i : v.items) s >> i;
    return s;
}
struct Msg_CouponDiamonds {
    Msg_CouponBaseInfo info;
    unsigned int diamonds;
    unsigned int productId;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<Msg_CouponBaseInfo>::save(_vobj, "info", info);
        PacketDataHelper<unsigned int>::save(_vobj, "diamonds", diamonds);
        PacketDataHelper<unsigned int>::save(_vobj, "productId", productId);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<Msg_CouponBaseInfo>::load(_vobj, "info", info);
        PacketDataHelper<unsigned int>::load(_vobj, "diamonds", diamonds);
        PacketDataHelper<unsigned int>::load(_vobj, "productId", productId);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_CouponDiamonds &v) {
    s << v.info;
    s << DataStream::ccu(v.diamonds);
    s << DataStream::ccu(v.productId);
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_CouponDiamonds &v) {
    s >> v.info;
    s >> DataStream::cu(v.diamonds);
    s >> DataStream::cu(v.productId);
    return s;
}
struct Msg_DisableFG_AddItems {
    unsigned int groupId;
    std::vector<Msg_Item> items;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<unsigned int>::save(_vobj, "groupId", groupId);
        PacketDataHelper<Msg_Item>::save(_vobj, "items", items);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<unsigned int>::load(_vobj, "groupId", groupId);
        PacketDataHelper<Msg_Item>::load(_vobj, "items", items);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_DisableFG_AddItems &v) {
    s << DataStream::ccu(v.groupId);
    s << DataStream::ccu(v.items.size());
    for (auto &i : v.items) s << i;
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_DisableFG_AddItems &v) {
    size_t c; (void)c;
    s >> DataStream::cu(v.groupId);
    s >> DataStream::cu(c);
    v.items.resize(c);
    for (auto &i : v.items) s >> i;
    return s;
}
struct Msg_Award {
    unsigned int rank;
    unsigned int money;
    unsigned int diamonds;
    std::vector<Msg_Item> items;
    str8 desc;
    unsigned int imageId;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<unsigned int>::save(_vobj, "rank", rank);
        PacketDataHelper<unsigned int>::save(_vobj, "money", money);
        PacketDataHelper<unsigned int>::save(_vobj, "diamonds", diamonds);
        PacketDataHelper<Msg_Item>::save(_vobj, "items", items);
        PacketDataHelper<str8>::save(_vobj, "desc", desc);
        PacketDataHelper<unsigned int>::save(_vobj, "imageId", imageId);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<unsigned int>::load(_vobj, "rank", rank);
        PacketDataHelper<unsigned int>::load(_vobj, "money", money);
        PacketDataHelper<unsigned int>::load(_vobj, "diamonds", diamonds);
        PacketDataHelper<Msg_Item>::load(_vobj, "items", items);
        PacketDataHelper<str8>::load(_vobj, "desc", desc);
        PacketDataHelper<unsigned int>::load(_vobj, "imageId", imageId);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_Award &v) {
    s << DataStream::ccu(v.rank);
    s << DataStream::ccu(v.money);
    s << DataStream::ccu(v.diamonds);
    s << DataStream::ccu(v.items.size());
    for (auto &i : v.items) s << i;
    s << v.desc;
    s << DataStream::ccu(v.imageId);
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_Award &v) {
    size_t c; (void)c;
    s >> DataStream::cu(v.rank);
    s >> DataStream::cu(v.money);
    s >> DataStream::cu(v.diamonds);
    s >> DataStream::cu(c);
    v.items.resize(c);
    for (auto &i : v.items) s >> i;
    s >> v.desc;
    s >> DataStream::cu(v.imageId);
    return s;
}
struct Msg_LotteryInfo {
    std::vector<Msg_Award> awards;
    f32 validTime;
    unsigned int drawTimes;
    unsigned int drawCost;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<Msg_Award>::save(_vobj, "awards", awards);
        PacketDataHelper<f32>::save(_vobj, "validTime", validTime);
        PacketDataHelper<unsigned int>::save(_vobj, "drawTimes", drawTimes);
        PacketDataHelper<unsigned int>::save(_vobj, "drawCost", drawCost);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<Msg_Award>::load(_vobj, "awards", awards);
        PacketDataHelper<f32>::load(_vobj, "validTime", validTime);
        PacketDataHelper<unsigned int>::load(_vobj, "drawTimes", drawTimes);
        PacketDataHelper<unsigned int>::load(_vobj, "drawCost", drawCost);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_LotteryInfo &v) {
    s << DataStream::ccu(v.awards.size());
    for (auto &i : v.awards) s << i;
    s << v.validTime;
    s << DataStream::ccu(v.drawTimes);
    s << DataStream::ccu(v.drawCost);
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_LotteryInfo &v) {
    size_t c; (void)c;
    s >> DataStream::cu(c);
    v.awards.resize(c);
    for (auto &i : v.awards) s >> i;
    s >> v.validTime;
    s >> DataStream::cu(v.drawTimes);
    s >> DataStream::cu(v.drawCost);
    return s;
}
struct Msg_LotteryDrawInfo {
    unsigned int index;
    Msg_Award newAward;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<unsigned int>::save(_vobj, "index", index);
        PacketDataHelper<Msg_Award>::save(_vobj, "newAward", newAward);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<unsigned int>::load(_vobj, "index", index);
        PacketDataHelper<Msg_Award>::load(_vobj, "newAward", newAward);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_LotteryDrawInfo &v) {
    s << DataStream::ccu(v.index);
    s << v.newAward;
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_LotteryDrawInfo &v) {
    s >> DataStream::cu(v.index);
    s >> v.newAward;
    return s;
}
struct Msg_Announcement {
    unsigned int id;
    str8 content;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<unsigned int>::save(_vobj, "id", id);
        PacketDataHelper<str8>::save(_vobj, "content", content);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<unsigned int>::load(_vobj, "id", id);
        PacketDataHelper<str8>::load(_vobj, "content", content);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_Announcement &v) {
    s << DataStream::ccu(v.id);
    s << v.content;
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_Announcement &v) {
    s >> DataStream::cu(v.id);
    s >> v.content;
    return s;
}
struct Msg_RedeemCodePacket {
    str8 title;
    unsigned int money;
    unsigned int diamonds;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<str8>::save(_vobj, "title", title);
        PacketDataHelper<unsigned int>::save(_vobj, "money", money);
        PacketDataHelper<unsigned int>::save(_vobj, "diamonds", diamonds);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<str8>::load(_vobj, "title", title);
        PacketDataHelper<unsigned int>::load(_vobj, "money", money);
        PacketDataHelper<unsigned int>::load(_vobj, "diamonds", diamonds);
    }
};
inline DataStream & operator <<(DataStream &s, const Msg_RedeemCodePacket &v) {
    s << v.title;
    s << DataStream::ccu(v.money);
    s << DataStream::ccu(v.diamonds);
    return s;
}
inline DataStream & operator >>(DataStream &s, Msg_RedeemCodePacket &v) {
    s >> v.title;
    s >> DataStream::cu(v.money);
    s >> DataStream::cu(v.diamonds);
    return s;
}
class res_initPlayerData : public Packet {
public:
    enum { ID = 201 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        Msg_PlayerInitialData data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<Msg_PlayerInitialData>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<Msg_PlayerInitialData>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.data;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.data;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_invalid_operation : public Packet {
public:
    enum { ID = 202 };
    virtual u32 pid() const { return ID; }
};
class res_loginOk : public Packet {
public:
    enum { ID = 203 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.data);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.data);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_loginFailed : public Packet {
public:
    enum { ID = 204 };
    virtual u32 pid() const { return ID; }
};
class res_otherUserLogin : public Packet {
public:
    enum { ID = 205 };
    virtual u32 pid() const { return ID; }
};
class res_playerData : public Packet {
public:
    enum { ID = 206 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        Msg_PlayerData data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<Msg_PlayerData>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<Msg_PlayerData>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.data;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.data;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_timedData : public Packet {
public:
    enum { ID = 207 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        Msg_TimedData timeData;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<Msg_TimedData>::save(_vobj, "timeData", timeData);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<Msg_TimedData>::load(_vobj, "timeData", timeData);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.timeData;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.timeData;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_beginBattle : public Packet {
public:
    enum { ID = 208 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.data);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.data);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_intrusion : public Packet {
public:
    enum { ID = 211 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        Msg_Intrusion data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<Msg_Intrusion>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<Msg_Intrusion>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.data;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.data;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_rmbShopInfo : public Packet {
public:
    enum { ID = 212 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        std::vector<Msg_Product> shopInfo;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<Msg_Product>::save(_vobj, "shopInfo", shopInfo);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<Msg_Product>::load(_vobj, "shopInfo", shopInfo);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.shopInfo.size());
        for (auto &i : v.shopInfo) s << i;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        size_t c; (void)c;
        s >> DataStream::cu(c);
        v.shopInfo.resize(c);
        for (auto &i : v.shopInfo) s >> i;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_productInfo : public Packet {
public:
    enum { ID = 213 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        Msg_Product productInfo;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<Msg_Product>::save(_vobj, "productInfo", productInfo);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<Msg_Product>::load(_vobj, "productInfo", productInfo);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.productInfo;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.productInfo;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_orderDone : public Packet {
public:
    enum { ID = 214 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        str8 data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<str8>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<str8>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.data;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.data;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_productContent : public Packet {
public:
    enum { ID = 215 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        Msg_ProductContent data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<Msg_ProductContent>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<Msg_ProductContent>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.data;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.data;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_couponNone : public Packet {
public:
    enum { ID = 216 };
    virtual u32 pid() const { return ID; }
};
class res_couponHero : public Packet {
public:
    enum { ID = 217 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        Msg_CouponHero data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<Msg_CouponHero>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<Msg_CouponHero>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.data;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.data;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_couponItems : public Packet {
public:
    enum { ID = 218 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        Msg_CouponItems data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<Msg_CouponItems>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<Msg_CouponItems>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.data;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.data;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_couponDiamonds : public Packet {
public:
    enum { ID = 219 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        Msg_CouponDiamonds data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<Msg_CouponDiamonds>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<Msg_CouponDiamonds>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.data;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.data;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_lotteryNone : public Packet {
public:
    enum { ID = 220 };
    virtual u32 pid() const { return ID; }
};
class res_lotteryInfo : public Packet {
public:
    enum { ID = 221 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        Msg_LotteryInfo data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<Msg_LotteryInfo>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<Msg_LotteryInfo>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.data;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.data;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_lotteryDrawInfo : public Packet {
public:
    enum { ID = 222 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        Msg_LotteryDrawInfo data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<Msg_LotteryDrawInfo>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<Msg_LotteryDrawInfo>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.data;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.data;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_updataRegistration : public Packet {
public:
    enum { ID = 223 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        Msg_RegistrationData data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<Msg_RegistrationData>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<Msg_RegistrationData>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.data;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.data;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_announcementId : public Packet {
public:
    enum { ID = 224 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.data);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.data);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_announcement : public Packet {
public:
    enum { ID = 225 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        Msg_Announcement data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<Msg_Announcement>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<Msg_Announcement>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.data;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.data;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_redeemCodeInvalid : public Packet {
public:
    enum { ID = 226 };
    virtual u32 pid() const { return ID; }
};
class res_redeemCodePacket : public Packet {
public:
    enum { ID = 227 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        Msg_RedeemCodePacket data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<Msg_RedeemCodePacket>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<Msg_RedeemCodePacket>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.data;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.data;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_getBalance : public Packet {
public:
    enum { ID = 228 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        int resultCode;
        int diamond;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<int>::save(_vobj, "resultCode", resultCode);
            PacketDataHelper<int>::save(_vobj, "diamond", diamond);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<int>::load(_vobj, "resultCode", resultCode);
            PacketDataHelper<int>::load(_vobj, "diamond", diamond);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::cci(v.resultCode);
        s << DataStream::cci(v.diamond);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::ci(v.resultCode);
        s >> DataStream::ci(v.diamond);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_reset : public Packet {
public:
    enum { ID = 201 };
    virtual u32 pid() const { return ID; }
};
class req_playerData : public Packet {
public:
    enum { ID = 202 };
    virtual u32 pid() const { return ID; }
};
class req_timedData : public Packet {
public:
    enum { ID = 203 };
    virtual u32 pid() const { return ID; }
};
class req_techUpgrade : public Packet {
public:
    enum { ID = 204 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.data);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.data);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_towerUpgrade : public Packet {
public:
    enum { ID = 205 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        Msg_TowerIndex data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<Msg_TowerIndex>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<Msg_TowerIndex>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.data;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.data;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_beginBattle : public Packet {
public:
    enum { ID = 206 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        Msg_BeginBattleInfo data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<Msg_BeginBattleInfo>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<Msg_BeginBattleInfo>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.data;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.data;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_battleVictory : public Packet {
public:
    enum { ID = 207 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        Msg_LevelVictory data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<Msg_LevelVictory>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<Msg_LevelVictory>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.data;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.data;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_battleFailed : public Packet {
public:
    enum { ID = 208 };
    virtual u32 pid() const { return ID; }
};
class req_collectGoldMine : public Packet {
public:
    enum { ID = 211 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        Msg_GoldMineCollect data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<Msg_GoldMineCollect>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<Msg_GoldMineCollect>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.data;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.data;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_upgradeHero : public Packet {
public:
    enum { ID = 212 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.data);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.data);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_unlockRune : public Packet {
public:
    enum { ID = 213 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        Msg_UnlockRune data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<Msg_UnlockRune>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<Msg_UnlockRune>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.data;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.data;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_buyItem : public Packet {
public:
    enum { ID = 214 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.data);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.data);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_useItem : public Packet {
public:
    enum { ID = 215 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.data);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.data);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_rmbShopInfo : public Packet {
public:
    enum { ID = 216 };
    virtual u32 pid() const { return ID; }
};
class req_buyProduct : public Packet {
public:
    enum { ID = 217 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int productId;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "productId", productId);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "productId", productId);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.productId);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.productId);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_orderCompleted : public Packet {
public:
    enum { ID = 218 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        str8 data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<str8>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<str8>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.data;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.data;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_orderCancelled : public Packet {
public:
    enum { ID = 219 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        str8 data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<str8>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<str8>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.data;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.data;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_orderNoCheck : public Packet {
public:
    enum { ID = 220 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        str8 data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<str8>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<str8>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.data;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.data;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_meetMonster : public Packet {
public:
    enum { ID = 221 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.data);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.data);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_disableFG : public Packet {
public:
    enum { ID = 222 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.data);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.data);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_buyPlatform : public Packet {
public:
    enum { ID = 223 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int category;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "category", category);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "category", category);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.category);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.category);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_groupBattleVictory : public Packet {
public:
    enum { ID = 224 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        Msg_GroupLevelVictory data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<Msg_GroupLevelVictory>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<Msg_GroupLevelVictory>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.data;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.data;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_resetGroupLevel : public Packet {
public:
    enum { ID = 225 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.data);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.data);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_buyHeroWithCoupon : public Packet {
public:
    enum { ID = 226 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.data);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.data);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_useCoupon : public Packet {
public:
    enum { ID = 227 };
    virtual u32 pid() const { return ID; }
};
class req_disableFG_AddItems : public Packet {
public:
    enum { ID = 228 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        Msg_DisableFG_AddItems data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<Msg_DisableFG_AddItems>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<Msg_DisableFG_AddItems>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.data;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.data;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_lotteryDraw : public Packet {
public:
    enum { ID = 229 };
    virtual u32 pid() const { return ID; }
};
class req_buyMoney : public Packet {
public:
    enum { ID = 230 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.data);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.data);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_getMissionReward : public Packet {
public:
    enum { ID = 231 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.data);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.data);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_getRegistrationReward : public Packet {
public:
    enum { ID = 232 };
    virtual u32 pid() const { return ID; }
};
class req_announcement : public Packet {
public:
    enum { ID = 233 };
    virtual u32 pid() const { return ID; }
};
class req_redeemCode : public Packet {
public:
    enum { ID = 234 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u32 data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u32>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u32>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.data;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.data;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_getBalance : public Packet {
public:
    enum { ID = 235 };
    virtual u32 pid() const { return ID; }
};
class req_add_money : public Packet {
public:
    enum { ID = 300 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.data);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.data);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_add_diamond : public Packet {
public:
    enum { ID = 301 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.data);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.data);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_pass_level : public Packet {
public:
    enum { ID = 303 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.data);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.data);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
