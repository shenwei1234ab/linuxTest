// generated by pktcoder.
class req_LoginByTPInfo : public Packet {
public:
    enum { ID = 100 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u32 tpId;
        unsigned int gameId;
        str8 openId;
        str8 token;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u32>::save(_vobj, "tpId", tpId);
            PacketDataHelper<unsigned int>::save(_vobj, "gameId", gameId);
            PacketDataHelper<str8>::save(_vobj, "openId", openId);
            PacketDataHelper<str8>::save(_vobj, "token", token);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u32>::load(_vobj, "tpId", tpId);
            PacketDataHelper<unsigned int>::load(_vobj, "gameId", gameId);
            PacketDataHelper<str8>::load(_vobj, "openId", openId);
            PacketDataHelper<str8>::load(_vobj, "token", token);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.tpId;
        s << DataStream::ccu(v.gameId);
        s << v.openId;
        s << v.token;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.tpId;
        s >> DataStream::cu(v.gameId);
        s >> v.openId;
        s >> v.token;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_Login : public Packet {
public:
    enum { ID = 101 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u64 ppid;
        unsigned int gameId;
        u32 pptoken;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u64>::save(_vobj, "ppid", ppid);
            PacketDataHelper<unsigned int>::save(_vobj, "gameId", gameId);
            PacketDataHelper<u32>::save(_vobj, "pptoken", pptoken);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u64>::load(_vobj, "ppid", ppid);
            PacketDataHelper<unsigned int>::load(_vobj, "gameId", gameId);
            PacketDataHelper<u32>::load(_vobj, "pptoken", pptoken);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.ppid;
        s << DataStream::ccu(v.gameId);
        s << v.pptoken;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.ppid;
        s >> DataStream::cu(v.gameId);
        s >> v.pptoken;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_LoginOkWithInfo : public Packet {
public:
    enum { ID = 102 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u64 ppid;
        u32 pptoken;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u64>::save(_vobj, "ppid", ppid);
            PacketDataHelper<u32>::save(_vobj, "pptoken", pptoken);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u64>::load(_vobj, "ppid", ppid);
            PacketDataHelper<u32>::load(_vobj, "pptoken", pptoken);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.ppid;
        s << v.pptoken;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.ppid;
        s >> v.pptoken;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_LoginOk : public Packet {
public:
    enum { ID = 103 };
    virtual u32 pid() const { return ID; }
};
class res_LoginError : public Packet {
public:
    enum { ID = 104 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int errorCode;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "errorCode", errorCode);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "errorCode", errorCode);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.errorCode);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.errorCode);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_CreateOrder : public Packet {
public:
    enum { ID = 105 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int productId;
        unsigned int serverId;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "productId", productId);
            PacketDataHelper<unsigned int>::save(_vobj, "serverId", serverId);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "productId", productId);
            PacketDataHelper<unsigned int>::load(_vobj, "serverId", serverId);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.productId);
        s << DataStream::ccu(v.serverId);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.productId);
        s >> DataStream::cu(v.serverId);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_CreateOrderError : public Packet {
public:
    enum { ID = 106 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int errorCode;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "errorCode", errorCode);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "errorCode", errorCode);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.errorCode);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.errorCode);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_CreateOrder : public Packet {
public:
    enum { ID = 107 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int orderId;
        str8 productName;
        unsigned int price;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "orderId", orderId);
            PacketDataHelper<str8>::save(_vobj, "productName", productName);
            PacketDataHelper<unsigned int>::save(_vobj, "price", price);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "orderId", orderId);
            PacketDataHelper<str8>::load(_vobj, "productName", productName);
            PacketDataHelper<unsigned int>::load(_vobj, "price", price);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.orderId);
        s << v.productName;
        s << DataStream::ccu(v.price);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.orderId);
        s >> v.productName;
        s >> DataStream::cu(v.price);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_Purchase : public Packet {
public:
    enum { ID = 108 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int orderId;
        str8 receiptData;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "orderId", orderId);
            PacketDataHelper<str8>::save(_vobj, "receiptData", receiptData);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "orderId", orderId);
            PacketDataHelper<str8>::load(_vobj, "receiptData", receiptData);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.orderId);
        s << v.receiptData;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.orderId);
        s >> v.receiptData;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_OrderCancel : public Packet {
public:
    enum { ID = 109 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int orderId;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "orderId", orderId);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "orderId", orderId);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.orderId);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.orderId);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_OrderFinished : public Packet {
public:
    enum { ID = 110 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int orderId;
        unsigned int errorCode;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "orderId", orderId);
            PacketDataHelper<unsigned int>::save(_vobj, "errorCode", errorCode);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "orderId", orderId);
            PacketDataHelper<unsigned int>::load(_vobj, "errorCode", errorCode);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.orderId);
        s << DataStream::ccu(v.errorCode);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.orderId);
        s >> DataStream::cu(v.errorCode);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_UserRegister : public Packet {
public:
    enum { ID = 111 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        str8 account;
        str8 password;
        str8 phonenumber;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<str8>::save(_vobj, "account", account);
            PacketDataHelper<str8>::save(_vobj, "password", password);
            PacketDataHelper<str8>::save(_vobj, "phonenumber", phonenumber);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<str8>::load(_vobj, "account", account);
            PacketDataHelper<str8>::load(_vobj, "password", password);
            PacketDataHelper<str8>::load(_vobj, "phonenumber", phonenumber);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.account;
        s << v.password;
        s << v.phonenumber;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.account;
        s >> v.password;
        s >> v.phonenumber;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_RegisterOk : public Packet {
public:
    enum { ID = 112 };
    virtual u32 pid() const { return ID; }
};
class res_RegisterFail : public Packet {
public:
    enum { ID = 113 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int errorCode;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "errorCode", errorCode);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "errorCode", errorCode);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.errorCode);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.errorCode);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_CheckAccountCanUse : public Packet {
public:
    enum { ID = 114 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        str8 account;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<str8>::save(_vobj, "account", account);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<str8>::load(_vobj, "account", account);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.account;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.account;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_CheckAccountCanUse : public Packet {
public:
    enum { ID = 115 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int errorCode;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "errorCode", errorCode);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "errorCode", errorCode);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.errorCode);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.errorCode);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_SetNickname : public Packet {
public:
    enum { ID = 116 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        str8 nickname;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<str8>::save(_vobj, "nickname", nickname);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<str8>::load(_vobj, "nickname", nickname);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.nickname;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.nickname;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_SetNicknameOk : public Packet {
public:
    enum { ID = 117 };
    virtual u32 pid() const { return ID; }
};
class res_SetNicknameFail : public Packet {
public:
    enum { ID = 118 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int errorCode;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "errorCode", errorCode);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "errorCode", errorCode);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.errorCode);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.errorCode);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_UserLogin : public Packet {
public:
    enum { ID = 119 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u32 tpId;
        unsigned int gameId;
        str8 account;
        str8 password;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u32>::save(_vobj, "tpId", tpId);
            PacketDataHelper<unsigned int>::save(_vobj, "gameId", gameId);
            PacketDataHelper<str8>::save(_vobj, "account", account);
            PacketDataHelper<str8>::save(_vobj, "password", password);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u32>::load(_vobj, "tpId", tpId);
            PacketDataHelper<unsigned int>::load(_vobj, "gameId", gameId);
            PacketDataHelper<str8>::load(_vobj, "account", account);
            PacketDataHelper<str8>::load(_vobj, "password", password);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.tpId;
        s << DataStream::ccu(v.gameId);
        s << v.account;
        s << v.password;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.tpId;
        s >> DataStream::cu(v.gameId);
        s >> v.account;
        s >> v.password;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_RandomNickname : public Packet {
public:
    enum { ID = 120 };
    virtual u32 pid() const { return ID; }
};
class res_RandomNickname : public Packet {
public:
    enum { ID = 121 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        str8 nickname;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<str8>::save(_vobj, "nickname", nickname);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<str8>::load(_vobj, "nickname", nickname);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.nickname;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.nickname;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_LoginByTPInfo2 : public Packet {
public:
    enum { ID = 130 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u32 tpId;
        unsigned int gameId;
        str8 openId;
        str8 token;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u32>::save(_vobj, "tpId", tpId);
            PacketDataHelper<unsigned int>::save(_vobj, "gameId", gameId);
            PacketDataHelper<str8>::save(_vobj, "openId", openId);
            PacketDataHelper<str8>::save(_vobj, "token", token);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u32>::load(_vobj, "tpId", tpId);
            PacketDataHelper<unsigned int>::load(_vobj, "gameId", gameId);
            PacketDataHelper<str8>::load(_vobj, "openId", openId);
            PacketDataHelper<str8>::load(_vobj, "token", token);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.tpId;
        s << DataStream::ccu(v.gameId);
        s << v.openId;
        s << v.token;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.tpId;
        s >> DataStream::cu(v.gameId);
        s >> v.openId;
        s >> v.token;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_LoginOkWithInfo2 : public Packet {
public:
    enum { ID = 131 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u64 ppid;
        u32 pptoken;
        str8 nickname;
        str8 avatar;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u64>::save(_vobj, "ppid", ppid);
            PacketDataHelper<u32>::save(_vobj, "pptoken", pptoken);
            PacketDataHelper<str8>::save(_vobj, "nickname", nickname);
            PacketDataHelper<str8>::save(_vobj, "avatar", avatar);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u64>::load(_vobj, "ppid", ppid);
            PacketDataHelper<u32>::load(_vobj, "pptoken", pptoken);
            PacketDataHelper<str8>::load(_vobj, "nickname", nickname);
            PacketDataHelper<str8>::load(_vobj, "avatar", avatar);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.ppid;
        s << v.pptoken;
        s << v.nickname;
        s << v.avatar;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.ppid;
        s >> v.pptoken;
        s >> v.nickname;
        s >> v.avatar;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_SetAvatar : public Packet {
public:
    enum { ID = 132 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        str8 avatar;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<str8>::save(_vobj, "avatar", avatar);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<str8>::load(_vobj, "avatar", avatar);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.avatar;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.avatar;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_SetAvatarOk : public Packet {
public:
    enum { ID = 133 };
    virtual u32 pid() const { return ID; }
};
class req_GetGameSvrAddr : public Packet {
public:
    enum { ID = 134 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        str8 versionInfo;
        str8 reserved;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<str8>::save(_vobj, "versionInfo", versionInfo);
            PacketDataHelper<str8>::save(_vobj, "reserved", reserved);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<str8>::load(_vobj, "versionInfo", versionInfo);
            PacketDataHelper<str8>::load(_vobj, "reserved", reserved);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.versionInfo;
        s << v.reserved;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.versionInfo;
        s >> v.reserved;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_GetGameSvrAddr : public Packet {
public:
    enum { ID = 135 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        str8 ip;
        u16 port;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<str8>::save(_vobj, "ip", ip);
            PacketDataHelper<u16>::save(_vobj, "port", port);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<str8>::load(_vobj, "ip", ip);
            PacketDataHelper<u16>::load(_vobj, "port", port);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.ip;
        s << v.port;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.ip;
        s >> v.port;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_GetGameSvrAddrFail : public Packet {
public:
    enum { ID = 136 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int errorCode;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "errorCode", errorCode);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "errorCode", errorCode);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.errorCode);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.errorCode);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_BindingAccount : public Packet {
public:
    enum { ID = 137 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u32 tpId;
        unsigned int gameId;
        str8 account;
        str8 password;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u32>::save(_vobj, "tpId", tpId);
            PacketDataHelper<unsigned int>::save(_vobj, "gameId", gameId);
            PacketDataHelper<str8>::save(_vobj, "account", account);
            PacketDataHelper<str8>::save(_vobj, "password", password);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u32>::load(_vobj, "tpId", tpId);
            PacketDataHelper<unsigned int>::load(_vobj, "gameId", gameId);
            PacketDataHelper<str8>::load(_vobj, "account", account);
            PacketDataHelper<str8>::load(_vobj, "password", password);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.tpId;
        s << DataStream::ccu(v.gameId);
        s << v.account;
        s << v.password;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.tpId;
        s >> DataStream::cu(v.gameId);
        s >> v.account;
        s >> v.password;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_BindingAccount : public Packet {
public:
    enum { ID = 138 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int errorCode;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "errorCode", errorCode);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "errorCode", errorCode);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.errorCode);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.errorCode);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_ResetPWD : public Packet {
public:
    enum { ID = 141 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        str8 account;
        str8 oldPassword;
        str8 password;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<str8>::save(_vobj, "account", account);
            PacketDataHelper<str8>::save(_vobj, "oldPassword", oldPassword);
            PacketDataHelper<str8>::save(_vobj, "password", password);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<str8>::load(_vobj, "account", account);
            PacketDataHelper<str8>::load(_vobj, "oldPassword", oldPassword);
            PacketDataHelper<str8>::load(_vobj, "password", password);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.account;
        s << v.oldPassword;
        s << v.password;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.account;
        s >> v.oldPassword;
        s >> v.password;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_ResetPWD : public Packet {
public:
    enum { ID = 142 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int errorCode;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "errorCode", errorCode);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "errorCode", errorCode);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.errorCode);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.errorCode);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_GetSubChannelId : public Packet {
public:
    enum { ID = 143 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int mainChannelId;
        str8 channelLabel;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "mainChannelId", mainChannelId);
            PacketDataHelper<str8>::save(_vobj, "channelLabel", channelLabel);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "mainChannelId", mainChannelId);
            PacketDataHelper<str8>::load(_vobj, "channelLabel", channelLabel);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.mainChannelId);
        s << v.channelLabel;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.mainChannelId);
        s >> v.channelLabel;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_GetSubChannelId : public Packet {
public:
    enum { ID = 144 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int ppChannelId;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "ppChannelId", ppChannelId);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "ppChannelId", ppChannelId);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.ppChannelId);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.ppChannelId);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
