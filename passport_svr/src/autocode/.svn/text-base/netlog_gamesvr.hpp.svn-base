// generated by pktcoder.
class req_netlog : public Packet {
public:
    enum { ID = 300 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u64 handle;
        str8 log;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u64>::save(_vobj, "handle", handle);
            PacketDataHelper<str8>::save(_vobj, "log", log);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u64>::load(_vobj, "handle", handle);
            PacketDataHelper<str8>::load(_vobj, "log", log);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.handle;
        s << v.log;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.handle;
        s >> v.log;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_netlog : public Packet {
public:
    enum { ID = 301 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u64 handle;
        u32 status;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u64>::save(_vobj, "handle", handle);
            PacketDataHelper<u32>::save(_vobj, "status", status);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u64>::load(_vobj, "handle", handle);
            PacketDataHelper<u32>::load(_vobj, "status", status);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.handle;
        s << v.status;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.handle;
        s >> v.status;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
