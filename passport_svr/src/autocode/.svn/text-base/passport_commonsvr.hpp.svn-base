// generated by pktcoder.
class req_Heart : public Packet {
public:
    enum { ID = 900 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u64 handle;
        u64 serverid;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u64>::save(_vobj, "handle", handle);
            PacketDataHelper<u64>::save(_vobj, "serverid", serverid);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u64>::load(_vobj, "handle", handle);
            PacketDataHelper<u64>::load(_vobj, "serverid", serverid);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.handle;
        s << v.serverid;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.handle;
        s >> v.serverid;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_Heart : public Packet {
public:
    enum { ID = 901 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u64 handle;
        u64 serverid;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u64>::save(_vobj, "handle", handle);
            PacketDataHelper<u64>::save(_vobj, "serverid", serverid);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u64>::load(_vobj, "handle", handle);
            PacketDataHelper<u64>::load(_vobj, "serverid", serverid);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.handle;
        s << v.serverid;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.handle;
        s >> v.serverid;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_ValidateUser : public Packet {
public:
    enum { ID = 902 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        str8 ppid;
        str8 pptoken;
        unsigned int gameId;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<str8>::save(_vobj, "ppid", ppid);
            PacketDataHelper<str8>::save(_vobj, "pptoken", pptoken);
            PacketDataHelper<unsigned int>::save(_vobj, "gameId", gameId);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<str8>::load(_vobj, "ppid", ppid);
            PacketDataHelper<str8>::load(_vobj, "pptoken", pptoken);
            PacketDataHelper<unsigned int>::load(_vobj, "gameId", gameId);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.ppid;
        s << v.pptoken;
        s << DataStream::ccu(v.gameId);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.ppid;
        s >> v.pptoken;
        s >> DataStream::cu(v.gameId);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_ValidateUser : public Packet {
public:
    enum { ID = 903 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int errorCode;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "errorCode", errorCode);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "errorCode", errorCode);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.errorCode);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.errorCode);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_JsonDate : public Packet {
public:
    enum { ID = 904 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u64 handle;
        s32 result;
        str8 jsonvalue;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u64>::save(_vobj, "handle", handle);
            PacketDataHelper<s32>::save(_vobj, "result", result);
            PacketDataHelper<str8>::save(_vobj, "jsonvalue", jsonvalue);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u64>::load(_vobj, "handle", handle);
            PacketDataHelper<s32>::load(_vobj, "result", result);
            PacketDataHelper<str8>::load(_vobj, "jsonvalue", jsonvalue);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.handle;
        s << v.result;
        s << v.jsonvalue;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.handle;
        s >> v.result;
        s >> v.jsonvalue;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
