// generated by pktcoder.
struct User {
    u64 ppid;
    str8 NickName;
    str8 Info;
    unsigned int Gender;
    str8 Icon;
    unsigned int SocialFlag;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<u64>::save(_vobj, "ppid", ppid);
        PacketDataHelper<str8>::save(_vobj, "NickName", NickName);
        PacketDataHelper<str8>::save(_vobj, "Info", Info);
        PacketDataHelper<unsigned int>::save(_vobj, "Gender", Gender);
        PacketDataHelper<str8>::save(_vobj, "Icon", Icon);
        PacketDataHelper<unsigned int>::save(_vobj, "SocialFlag", SocialFlag);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<u64>::load(_vobj, "ppid", ppid);
        PacketDataHelper<str8>::load(_vobj, "NickName", NickName);
        PacketDataHelper<str8>::load(_vobj, "Info", Info);
        PacketDataHelper<unsigned int>::load(_vobj, "Gender", Gender);
        PacketDataHelper<str8>::load(_vobj, "Icon", Icon);
        PacketDataHelper<unsigned int>::load(_vobj, "SocialFlag", SocialFlag);
    }
};
inline DataStream & operator <<(DataStream &s, const User &v) {
    s << v.ppid;
    s << v.NickName;
    s << v.Info;
    s << DataStream::ccu(v.Gender);
    s << v.Icon;
    s << DataStream::ccu(v.SocialFlag);
    return s;
}
inline DataStream & operator >>(DataStream &s, User &v) {
    s >> v.ppid;
    s >> v.NickName;
    s >> v.Info;
    s >> DataStream::cu(v.Gender);
    s >> v.Icon;
    s >> DataStream::cu(v.SocialFlag);
    return s;
}
struct CharRoom {
    unsigned int ChannelId;
    str8 Name;
    void _save(Variable_object &_vobj) const {
        PacketDataHelper<unsigned int>::save(_vobj, "ChannelId", ChannelId);
        PacketDataHelper<str8>::save(_vobj, "Name", Name);
    }
    void _load(Variable_object &_vobj) {
        PacketDataHelper<unsigned int>::load(_vobj, "ChannelId", ChannelId);
        PacketDataHelper<str8>::load(_vobj, "Name", Name);
    }
};
inline DataStream & operator <<(DataStream &s, const CharRoom &v) {
    s << DataStream::ccu(v.ChannelId);
    s << v.Name;
    return s;
}
inline DataStream & operator >>(DataStream &s, CharRoom &v) {
    s >> DataStream::cu(v.ChannelId);
    s >> v.Name;
    return s;
}
class req_LoginCharSvr : public Packet {
public:
    enum { ID = 400 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u64 ppid;
        u32 pptoken;
        unsigned int gameId;
        unsigned int zoneId;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u64>::save(_vobj, "ppid", ppid);
            PacketDataHelper<u32>::save(_vobj, "pptoken", pptoken);
            PacketDataHelper<unsigned int>::save(_vobj, "gameId", gameId);
            PacketDataHelper<unsigned int>::save(_vobj, "zoneId", zoneId);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u64>::load(_vobj, "ppid", ppid);
            PacketDataHelper<u32>::load(_vobj, "pptoken", pptoken);
            PacketDataHelper<unsigned int>::load(_vobj, "gameId", gameId);
            PacketDataHelper<unsigned int>::load(_vobj, "zoneId", zoneId);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.ppid;
        s << v.pptoken;
        s << DataStream::ccu(v.gameId);
        s << DataStream::ccu(v.zoneId);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.ppid;
        s >> v.pptoken;
        s >> DataStream::cu(v.gameId);
        s >> DataStream::cu(v.zoneId);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_LoginCharSvr : public Packet {
public:
    enum { ID = 401 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int retCode;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "retCode", retCode);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "retCode", retCode);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.retCode);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.retCode);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_LogoutCharSvr : public Packet {
public:
    enum { ID = 402 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u64 ppid;
        u32 pptoken;
        unsigned int gameId;
        unsigned int zoneId;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u64>::save(_vobj, "ppid", ppid);
            PacketDataHelper<u32>::save(_vobj, "pptoken", pptoken);
            PacketDataHelper<unsigned int>::save(_vobj, "gameId", gameId);
            PacketDataHelper<unsigned int>::save(_vobj, "zoneId", zoneId);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u64>::load(_vobj, "ppid", ppid);
            PacketDataHelper<u32>::load(_vobj, "pptoken", pptoken);
            PacketDataHelper<unsigned int>::load(_vobj, "gameId", gameId);
            PacketDataHelper<unsigned int>::load(_vobj, "zoneId", zoneId);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.ppid;
        s << v.pptoken;
        s << DataStream::ccu(v.gameId);
        s << DataStream::ccu(v.zoneId);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.ppid;
        s >> v.pptoken;
        s >> DataStream::cu(v.gameId);
        s >> DataStream::cu(v.zoneId);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_LogoutCharSvr : public Packet {
public:
    enum { ID = 403 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int retCode;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "retCode", retCode);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "retCode", retCode);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.retCode);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.retCode);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_GetProfile : public Packet {
public:
    enum { ID = 404 };
    virtual u32 pid() const { return ID; }
};
class res_GetProfile : public Packet {
public:
    enum { ID = 405 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        str8 NickName;
        str8 Info;
        unsigned int Gender;
        str8 Icon;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<str8>::save(_vobj, "NickName", NickName);
            PacketDataHelper<str8>::save(_vobj, "Info", Info);
            PacketDataHelper<unsigned int>::save(_vobj, "Gender", Gender);
            PacketDataHelper<str8>::save(_vobj, "Icon", Icon);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<str8>::load(_vobj, "NickName", NickName);
            PacketDataHelper<str8>::load(_vobj, "Info", Info);
            PacketDataHelper<unsigned int>::load(_vobj, "Gender", Gender);
            PacketDataHelper<str8>::load(_vobj, "Icon", Icon);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.NickName;
        s << v.Info;
        s << DataStream::ccu(v.Gender);
        s << v.Icon;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.NickName;
        s >> v.Info;
        s >> DataStream::cu(v.Gender);
        s >> v.Icon;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_SetProfile : public Packet {
public:
    enum { ID = 406 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        str8 NickName;
        str8 Info;
        unsigned int Gender;
        str8 Icon;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<str8>::save(_vobj, "NickName", NickName);
            PacketDataHelper<str8>::save(_vobj, "Info", Info);
            PacketDataHelper<unsigned int>::save(_vobj, "Gender", Gender);
            PacketDataHelper<str8>::save(_vobj, "Icon", Icon);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<str8>::load(_vobj, "NickName", NickName);
            PacketDataHelper<str8>::load(_vobj, "Info", Info);
            PacketDataHelper<unsigned int>::load(_vobj, "Gender", Gender);
            PacketDataHelper<str8>::load(_vobj, "Icon", Icon);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.NickName;
        s << v.Info;
        s << DataStream::ccu(v.Gender);
        s << v.Icon;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.NickName;
        s >> v.Info;
        s >> DataStream::cu(v.Gender);
        s >> v.Icon;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_SetProfile : public Packet {
public:
    enum { ID = 407 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int retCode;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "retCode", retCode);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "retCode", retCode);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.retCode);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.retCode);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_UserSearch : public Packet {
public:
    enum { ID = 408 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        str8 NickName;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<str8>::save(_vobj, "NickName", NickName);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<str8>::load(_vobj, "NickName", NickName);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.NickName;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.NickName;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_UserSearch : public Packet {
public:
    enum { ID = 409 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int retCode;
        std::vector<User> users;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "retCode", retCode);
            PacketDataHelper<User>::save(_vobj, "users", users);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "retCode", retCode);
            PacketDataHelper<User>::load(_vobj, "users", users);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.retCode);
        s << DataStream::ccu(v.users.size());
        for (auto &i : v.users) s << i;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        size_t c; (void)c;
        s >> DataStream::cu(v.retCode);
        s >> DataStream::cu(c);
        v.users.resize(c);
        for (auto &i : v.users) s >> i;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_UserSearch_NotFind : public Packet {
public:
    enum { ID = 410 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int retCode;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "retCode", retCode);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "retCode", retCode);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.retCode);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.retCode);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_FriendList : public Packet {
public:
    enum { ID = 411 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int Type;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "Type", Type);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "Type", Type);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.Type);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.Type);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_FriendList : public Packet {
public:
    enum { ID = 412 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int retCode;
        std::vector<User> users;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "retCode", retCode);
            PacketDataHelper<User>::save(_vobj, "users", users);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "retCode", retCode);
            PacketDataHelper<User>::load(_vobj, "users", users);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.retCode);
        s << DataStream::ccu(v.users.size());
        for (auto &i : v.users) s << i;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        size_t c; (void)c;
        s >> DataStream::cu(v.retCode);
        s >> DataStream::cu(c);
        v.users.resize(c);
        for (auto &i : v.users) s >> i;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_AddFriend : public Packet {
public:
    enum { ID = 413 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u64 ppid;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u64>::save(_vobj, "ppid", ppid);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u64>::load(_vobj, "ppid", ppid);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.ppid;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.ppid;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_AddFriend : public Packet {
public:
    enum { ID = 414 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int retCode;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "retCode", retCode);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "retCode", retCode);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.retCode);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.retCode);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_RemoveFriend : public Packet {
public:
    enum { ID = 415 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u64 ppid;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u64>::save(_vobj, "ppid", ppid);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u64>::load(_vobj, "ppid", ppid);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.ppid;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.ppid;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_RemoveFriend : public Packet {
public:
    enum { ID = 416 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int retCode;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "retCode", retCode);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "retCode", retCode);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.retCode);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.retCode);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_AddBlocked : public Packet {
public:
    enum { ID = 417 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u64 ppid;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u64>::save(_vobj, "ppid", ppid);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u64>::load(_vobj, "ppid", ppid);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.ppid;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.ppid;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_AddBlocked : public Packet {
public:
    enum { ID = 418 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int retCode;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "retCode", retCode);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "retCode", retCode);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.retCode);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.retCode);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_RemoveBlocked : public Packet {
public:
    enum { ID = 419 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u64 ppid;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u64>::save(_vobj, "ppid", ppid);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u64>::load(_vobj, "ppid", ppid);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.ppid;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.ppid;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_RemoveBlocked : public Packet {
public:
    enum { ID = 420 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int retCode;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "retCode", retCode);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "retCode", retCode);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.retCode);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.retCode);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_GetUserDetail : public Packet {
public:
    enum { ID = 421 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        std::vector<u64> ppidVtr;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u64>::save(_vobj, "ppidVtr", ppidVtr);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u64>::load(_vobj, "ppidVtr", ppidVtr);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.ppidVtr.size());
        if (!v.ppidVtr.empty()) s << DataStream::cbuf(v.ppidVtr.data(), v.ppidVtr.size() * sizeof(u64));
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        size_t c; (void)c;
        s >> DataStream::cu(c);
        v.ppidVtr.resize(c);
        if (c) s >> DataStream::buf(v.ppidVtr.data(), c * sizeof(u64));
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_GetUserDetail : public Packet {
public:
    enum { ID = 422 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int retCode;
        std::vector<User> users;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "retCode", retCode);
            PacketDataHelper<User>::save(_vobj, "users", users);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "retCode", retCode);
            PacketDataHelper<User>::load(_vobj, "users", users);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.retCode);
        s << DataStream::ccu(v.users.size());
        for (auto &i : v.users) s << i;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        size_t c; (void)c;
        s >> DataStream::cu(v.retCode);
        s >> DataStream::cu(c);
        v.users.resize(c);
        for (auto &i : v.users) s >> i;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_GetLocalRoomList : public Packet {
public:
    enum { ID = 423 };
    virtual u32 pid() const { return ID; }
};
class res_GetLocalRoomList : public Packet {
public:
    enum { ID = 424 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        std::vector<CharRoom> RoomList;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<CharRoom>::save(_vobj, "RoomList", RoomList);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<CharRoom>::load(_vobj, "RoomList", RoomList);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.RoomList.size());
        for (auto &i : v.RoomList) s << i;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        size_t c; (void)c;
        s >> DataStream::cu(c);
        v.RoomList.resize(c);
        for (auto &i : v.RoomList) s >> i;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_EnterRoom : public Packet {
public:
    enum { ID = 425 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int ChannelId;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "ChannelId", ChannelId);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "ChannelId", ChannelId);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.ChannelId);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.ChannelId);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_EnterRoom : public Packet {
public:
    enum { ID = 426 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int retCode;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "retCode", retCode);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "retCode", retCode);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.retCode);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.retCode);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_LeaveRoom : public Packet {
public:
    enum { ID = 427 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int ChannelId;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "ChannelId", ChannelId);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "ChannelId", ChannelId);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.ChannelId);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.ChannelId);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_LeaveRoom : public Packet {
public:
    enum { ID = 428 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int retCode;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "retCode", retCode);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "retCode", retCode);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.retCode);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.retCode);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_RoomMemberList : public Packet {
public:
    enum { ID = 429 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int ChannelId;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "ChannelId", ChannelId);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "ChannelId", ChannelId);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.ChannelId);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.ChannelId);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_RoomMemberList : public Packet {
public:
    enum { ID = 430 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        std::vector<User> UserList;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<User>::save(_vobj, "UserList", UserList);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<User>::load(_vobj, "UserList", UserList);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.UserList.size());
        for (auto &i : v.UserList) s << i;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        size_t c; (void)c;
        s >> DataStream::cu(c);
        v.UserList.resize(c);
        for (auto &i : v.UserList) s >> i;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_IsInRoom : public Packet {
public:
    enum { ID = 431 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int ChannelId;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "ChannelId", ChannelId);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "ChannelId", ChannelId);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.ChannelId);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.ChannelId);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_IsInRoom : public Packet {
public:
    enum { ID = 432 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int retCode;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "retCode", retCode);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "retCode", retCode);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.retCode);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.retCode);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_SendMessage : public Packet {
public:
    enum { ID = 433 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int MessageType;
        u64 ReceiverId;
        str8 Message;
        str8 data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "MessageType", MessageType);
            PacketDataHelper<u64>::save(_vobj, "ReceiverId", ReceiverId);
            PacketDataHelper<str8>::save(_vobj, "Message", Message);
            PacketDataHelper<str8>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "MessageType", MessageType);
            PacketDataHelper<u64>::load(_vobj, "ReceiverId", ReceiverId);
            PacketDataHelper<str8>::load(_vobj, "Message", Message);
            PacketDataHelper<str8>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.MessageType);
        s << v.ReceiverId;
        s << v.Message;
        s << v.data;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.MessageType);
        s >> v.ReceiverId;
        s >> v.Message;
        s >> v.data;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_SendMessage : public Packet {
public:
    enum { ID = 434 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int retCode;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "retCode", retCode);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "retCode", retCode);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.retCode);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.retCode);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class notice_MessageInfo : public Packet {
public:
    enum { ID = 435 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int MessageType;
        u64 SenderId;
        str8 SenderName;
        str8 Message;
        str8 data;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "MessageType", MessageType);
            PacketDataHelper<u64>::save(_vobj, "SenderId", SenderId);
            PacketDataHelper<str8>::save(_vobj, "SenderName", SenderName);
            PacketDataHelper<str8>::save(_vobj, "Message", Message);
            PacketDataHelper<str8>::save(_vobj, "data", data);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "MessageType", MessageType);
            PacketDataHelper<u64>::load(_vobj, "SenderId", SenderId);
            PacketDataHelper<str8>::load(_vobj, "SenderName", SenderName);
            PacketDataHelper<str8>::load(_vobj, "Message", Message);
            PacketDataHelper<str8>::load(_vobj, "data", data);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.MessageType);
        s << v.SenderId;
        s << v.SenderName;
        s << v.Message;
        s << v.data;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.MessageType);
        s >> v.SenderId;
        s >> v.SenderName;
        s >> v.Message;
        s >> v.data;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_ReadyCompleted : public Packet {
public:
    enum { ID = 436 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int status;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "status", status);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "status", status);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.status);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.status);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class res_ReadyCompleted : public Packet {
public:
    enum { ID = 437 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        unsigned int retCode;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<unsigned int>::save(_vobj, "retCode", retCode);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<unsigned int>::load(_vobj, "retCode", retCode);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << DataStream::ccu(v.retCode);
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> DataStream::cu(v.retCode);
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
template <class _Handler>
void _reg_chat_client_requests() {
    auto &_ins = PacketFactory<_Handler>::instance();
    _ins.registerRequestNoProcess<req_LoginCharSvr>();
    _ins.registerRequestNoProcess<req_LogoutCharSvr>();
    _ins.registerRequestNoProcess<req_GetProfile>();
    _ins.registerRequestNoProcess<req_SetProfile>();
    _ins.registerRequestNoProcess<req_UserSearch>();
    _ins.registerRequestNoProcess<req_FriendList>();
    _ins.registerRequestNoProcess<req_AddFriend>();
    _ins.registerRequestNoProcess<req_RemoveFriend>();
    _ins.registerRequestNoProcess<req_AddBlocked>();
    _ins.registerRequestNoProcess<req_RemoveBlocked>();
    _ins.registerRequestNoProcess<req_GetUserDetail>();
    _ins.registerRequestNoProcess<req_GetLocalRoomList>();
    _ins.registerRequestNoProcess<req_EnterRoom>();
    _ins.registerRequestNoProcess<req_LeaveRoom>();
    _ins.registerRequestNoProcess<req_RoomMemberList>();
    _ins.registerRequestNoProcess<req_IsInRoom>();
    _ins.registerRequestNoProcess<req_SendMessage>();
    _ins.registerRequestNoProcess<req_ReadyCompleted>();
}
template <class _Handler>
void _reg_chat_client_responses() {
    auto &_ins = PacketFactory<_Handler>::instance();
    _ins.registerResponseNoProcess<res_LoginCharSvr>();
    _ins.registerResponseNoProcess<res_LogoutCharSvr>();
    _ins.registerResponseNoProcess<res_GetProfile>();
    _ins.registerResponseNoProcess<res_SetProfile>();
    _ins.registerResponseNoProcess<res_UserSearch>();
    _ins.registerResponseNoProcess<res_UserSearch_NotFind>();
    _ins.registerResponseNoProcess<res_FriendList>();
    _ins.registerResponseNoProcess<res_AddFriend>();
    _ins.registerResponseNoProcess<res_RemoveFriend>();
    _ins.registerResponseNoProcess<res_AddBlocked>();
    _ins.registerResponseNoProcess<res_RemoveBlocked>();
    _ins.registerResponseNoProcess<res_GetUserDetail>();
    _ins.registerResponseNoProcess<res_GetLocalRoomList>();
    _ins.registerResponseNoProcess<res_EnterRoom>();
    _ins.registerResponseNoProcess<res_LeaveRoom>();
    _ins.registerResponseNoProcess<res_RoomMemberList>();
    _ins.registerResponseNoProcess<res_IsInRoom>();
    _ins.registerResponseNoProcess<res_SendMessage>();
    _ins.registerResponseNoProcess<notice_MessageInfo>();
    _ins.registerResponseNoProcess<res_ReadyCompleted>();
}
