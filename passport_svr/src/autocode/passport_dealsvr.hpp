// generated by pktcoder.
class req_GetBalance : public Packet {
public:
    enum { ID = 203 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u64 handle;
        str8 openid;
        str8 openkey;
        str8 pay_token;
        str8 appid;
        str8 ts;
        str8 pf;
        str8 pfkey;
        str8 zoneid;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u64>::save(_vobj, "handle", handle);
            PacketDataHelper<str8>::save(_vobj, "openid", openid);
            PacketDataHelper<str8>::save(_vobj, "openkey", openkey);
            PacketDataHelper<str8>::save(_vobj, "pay_token", pay_token);
            PacketDataHelper<str8>::save(_vobj, "appid", appid);
            PacketDataHelper<str8>::save(_vobj, "ts", ts);
            PacketDataHelper<str8>::save(_vobj, "pf", pf);
            PacketDataHelper<str8>::save(_vobj, "pfkey", pfkey);
            PacketDataHelper<str8>::save(_vobj, "zoneid", zoneid);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u64>::load(_vobj, "handle", handle);
            PacketDataHelper<str8>::load(_vobj, "openid", openid);
            PacketDataHelper<str8>::load(_vobj, "openkey", openkey);
            PacketDataHelper<str8>::load(_vobj, "pay_token", pay_token);
            PacketDataHelper<str8>::load(_vobj, "appid", appid);
            PacketDataHelper<str8>::load(_vobj, "ts", ts);
            PacketDataHelper<str8>::load(_vobj, "pf", pf);
            PacketDataHelper<str8>::load(_vobj, "pfkey", pfkey);
            PacketDataHelper<str8>::load(_vobj, "zoneid", zoneid);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.handle;
        s << v.openid;
        s << v.openkey;
        s << v.pay_token;
        s << v.appid;
        s << v.ts;
        s << v.pf;
        s << v.pfkey;
        s << v.zoneid;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.handle;
        s >> v.openid;
        s >> v.openkey;
        s >> v.pay_token;
        s >> v.appid;
        s >> v.ts;
        s >> v.pf;
        s >> v.pfkey;
        s >> v.zoneid;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_Pay : public Packet {
public:
    enum { ID = 204 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u64 handle;
        str8 openid;
        str8 openkey;
        str8 pay_token;
        str8 appid;
        str8 ts;
        str8 pf;
        str8 pfkey;
        str8 zoneid;
        str8 amt;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u64>::save(_vobj, "handle", handle);
            PacketDataHelper<str8>::save(_vobj, "openid", openid);
            PacketDataHelper<str8>::save(_vobj, "openkey", openkey);
            PacketDataHelper<str8>::save(_vobj, "pay_token", pay_token);
            PacketDataHelper<str8>::save(_vobj, "appid", appid);
            PacketDataHelper<str8>::save(_vobj, "ts", ts);
            PacketDataHelper<str8>::save(_vobj, "pf", pf);
            PacketDataHelper<str8>::save(_vobj, "pfkey", pfkey);
            PacketDataHelper<str8>::save(_vobj, "zoneid", zoneid);
            PacketDataHelper<str8>::save(_vobj, "amt", amt);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u64>::load(_vobj, "handle", handle);
            PacketDataHelper<str8>::load(_vobj, "openid", openid);
            PacketDataHelper<str8>::load(_vobj, "openkey", openkey);
            PacketDataHelper<str8>::load(_vobj, "pay_token", pay_token);
            PacketDataHelper<str8>::load(_vobj, "appid", appid);
            PacketDataHelper<str8>::load(_vobj, "ts", ts);
            PacketDataHelper<str8>::load(_vobj, "pf", pf);
            PacketDataHelper<str8>::load(_vobj, "pfkey", pfkey);
            PacketDataHelper<str8>::load(_vobj, "zoneid", zoneid);
            PacketDataHelper<str8>::load(_vobj, "amt", amt);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.handle;
        s << v.openid;
        s << v.openkey;
        s << v.pay_token;
        s << v.appid;
        s << v.ts;
        s << v.pf;
        s << v.pfkey;
        s << v.zoneid;
        s << v.amt;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.handle;
        s >> v.openid;
        s >> v.openkey;
        s >> v.pay_token;
        s >> v.appid;
        s >> v.ts;
        s >> v.pf;
        s >> v.pfkey;
        s >> v.zoneid;
        s >> v.amt;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_CancelPay : public Packet {
public:
    enum { ID = 205 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u64 handle;
        str8 openid;
        str8 openkey;
        str8 pay_token;
        str8 appid;
        str8 ts;
        str8 pf;
        str8 pfkey;
        str8 zoneid;
        str8 amt;
        str8 billno;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u64>::save(_vobj, "handle", handle);
            PacketDataHelper<str8>::save(_vobj, "openid", openid);
            PacketDataHelper<str8>::save(_vobj, "openkey", openkey);
            PacketDataHelper<str8>::save(_vobj, "pay_token", pay_token);
            PacketDataHelper<str8>::save(_vobj, "appid", appid);
            PacketDataHelper<str8>::save(_vobj, "ts", ts);
            PacketDataHelper<str8>::save(_vobj, "pf", pf);
            PacketDataHelper<str8>::save(_vobj, "pfkey", pfkey);
            PacketDataHelper<str8>::save(_vobj, "zoneid", zoneid);
            PacketDataHelper<str8>::save(_vobj, "amt", amt);
            PacketDataHelper<str8>::save(_vobj, "billno", billno);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u64>::load(_vobj, "handle", handle);
            PacketDataHelper<str8>::load(_vobj, "openid", openid);
            PacketDataHelper<str8>::load(_vobj, "openkey", openkey);
            PacketDataHelper<str8>::load(_vobj, "pay_token", pay_token);
            PacketDataHelper<str8>::load(_vobj, "appid", appid);
            PacketDataHelper<str8>::load(_vobj, "ts", ts);
            PacketDataHelper<str8>::load(_vobj, "pf", pf);
            PacketDataHelper<str8>::load(_vobj, "pfkey", pfkey);
            PacketDataHelper<str8>::load(_vobj, "zoneid", zoneid);
            PacketDataHelper<str8>::load(_vobj, "amt", amt);
            PacketDataHelper<str8>::load(_vobj, "billno", billno);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.handle;
        s << v.openid;
        s << v.openkey;
        s << v.pay_token;
        s << v.appid;
        s << v.ts;
        s << v.pf;
        s << v.pfkey;
        s << v.zoneid;
        s << v.amt;
        s << v.billno;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.handle;
        s >> v.openid;
        s >> v.openkey;
        s >> v.pay_token;
        s >> v.appid;
        s >> v.ts;
        s >> v.pf;
        s >> v.pfkey;
        s >> v.zoneid;
        s >> v.amt;
        s >> v.billno;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_Present : public Packet {
public:
    enum { ID = 206 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u64 handle;
        str8 openid;
        str8 openkey;
        str8 pay_token;
        str8 appid;
        str8 ts;
        str8 pf;
        str8 pfkey;
        str8 zoneid;
        str8 discountid;
        str8 giftid;
        str8 presenttimes;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u64>::save(_vobj, "handle", handle);
            PacketDataHelper<str8>::save(_vobj, "openid", openid);
            PacketDataHelper<str8>::save(_vobj, "openkey", openkey);
            PacketDataHelper<str8>::save(_vobj, "pay_token", pay_token);
            PacketDataHelper<str8>::save(_vobj, "appid", appid);
            PacketDataHelper<str8>::save(_vobj, "ts", ts);
            PacketDataHelper<str8>::save(_vobj, "pf", pf);
            PacketDataHelper<str8>::save(_vobj, "pfkey", pfkey);
            PacketDataHelper<str8>::save(_vobj, "zoneid", zoneid);
            PacketDataHelper<str8>::save(_vobj, "discountid", discountid);
            PacketDataHelper<str8>::save(_vobj, "giftid", giftid);
            PacketDataHelper<str8>::save(_vobj, "presenttimes", presenttimes);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u64>::load(_vobj, "handle", handle);
            PacketDataHelper<str8>::load(_vobj, "openid", openid);
            PacketDataHelper<str8>::load(_vobj, "openkey", openkey);
            PacketDataHelper<str8>::load(_vobj, "pay_token", pay_token);
            PacketDataHelper<str8>::load(_vobj, "appid", appid);
            PacketDataHelper<str8>::load(_vobj, "ts", ts);
            PacketDataHelper<str8>::load(_vobj, "pf", pf);
            PacketDataHelper<str8>::load(_vobj, "pfkey", pfkey);
            PacketDataHelper<str8>::load(_vobj, "zoneid", zoneid);
            PacketDataHelper<str8>::load(_vobj, "discountid", discountid);
            PacketDataHelper<str8>::load(_vobj, "giftid", giftid);
            PacketDataHelper<str8>::load(_vobj, "presenttimes", presenttimes);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.handle;
        s << v.openid;
        s << v.openkey;
        s << v.pay_token;
        s << v.appid;
        s << v.ts;
        s << v.pf;
        s << v.pfkey;
        s << v.zoneid;
        s << v.discountid;
        s << v.giftid;
        s << v.presenttimes;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.handle;
        s >> v.openid;
        s >> v.openkey;
        s >> v.pay_token;
        s >> v.appid;
        s >> v.ts;
        s >> v.pf;
        s >> v.pfkey;
        s >> v.zoneid;
        s >> v.discountid;
        s >> v.giftid;
        s >> v.presenttimes;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_AcctSave : public Packet {
public:
    enum { ID = 207 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u64 handle;
        str8 openid;
        str8 openkey;
        str8 pay_token;
        str8 appid;
        str8 ts;
        str8 pf;
        str8 pfkey;
        str8 zoneid;
        str8 amt;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u64>::save(_vobj, "handle", handle);
            PacketDataHelper<str8>::save(_vobj, "openid", openid);
            PacketDataHelper<str8>::save(_vobj, "openkey", openkey);
            PacketDataHelper<str8>::save(_vobj, "pay_token", pay_token);
            PacketDataHelper<str8>::save(_vobj, "appid", appid);
            PacketDataHelper<str8>::save(_vobj, "ts", ts);
            PacketDataHelper<str8>::save(_vobj, "pf", pf);
            PacketDataHelper<str8>::save(_vobj, "pfkey", pfkey);
            PacketDataHelper<str8>::save(_vobj, "zoneid", zoneid);
            PacketDataHelper<str8>::save(_vobj, "amt", amt);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u64>::load(_vobj, "handle", handle);
            PacketDataHelper<str8>::load(_vobj, "openid", openid);
            PacketDataHelper<str8>::load(_vobj, "openkey", openkey);
            PacketDataHelper<str8>::load(_vobj, "pay_token", pay_token);
            PacketDataHelper<str8>::load(_vobj, "appid", appid);
            PacketDataHelper<str8>::load(_vobj, "ts", ts);
            PacketDataHelper<str8>::load(_vobj, "pf", pf);
            PacketDataHelper<str8>::load(_vobj, "pfkey", pfkey);
            PacketDataHelper<str8>::load(_vobj, "zoneid", zoneid);
            PacketDataHelper<str8>::load(_vobj, "amt", amt);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.handle;
        s << v.openid;
        s << v.openkey;
        s << v.pay_token;
        s << v.appid;
        s << v.ts;
        s << v.pf;
        s << v.pfkey;
        s << v.zoneid;
        s << v.amt;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.handle;
        s >> v.openid;
        s >> v.openkey;
        s >> v.pay_token;
        s >> v.appid;
        s >> v.ts;
        s >> v.pf;
        s >> v.pfkey;
        s >> v.zoneid;
        s >> v.amt;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_QueryQualify : public Packet {
public:
    enum { ID = 208 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u64 handle;
        str8 openid;
        str8 openkey;
        str8 pay_token;
        str8 appid;
        str8 ts;
        str8 pf;
        str8 pfkey;
        str8 zoneid;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u64>::save(_vobj, "handle", handle);
            PacketDataHelper<str8>::save(_vobj, "openid", openid);
            PacketDataHelper<str8>::save(_vobj, "openkey", openkey);
            PacketDataHelper<str8>::save(_vobj, "pay_token", pay_token);
            PacketDataHelper<str8>::save(_vobj, "appid", appid);
            PacketDataHelper<str8>::save(_vobj, "ts", ts);
            PacketDataHelper<str8>::save(_vobj, "pf", pf);
            PacketDataHelper<str8>::save(_vobj, "pfkey", pfkey);
            PacketDataHelper<str8>::save(_vobj, "zoneid", zoneid);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u64>::load(_vobj, "handle", handle);
            PacketDataHelper<str8>::load(_vobj, "openid", openid);
            PacketDataHelper<str8>::load(_vobj, "openkey", openkey);
            PacketDataHelper<str8>::load(_vobj, "pay_token", pay_token);
            PacketDataHelper<str8>::load(_vobj, "appid", appid);
            PacketDataHelper<str8>::load(_vobj, "ts", ts);
            PacketDataHelper<str8>::load(_vobj, "pf", pf);
            PacketDataHelper<str8>::load(_vobj, "pfkey", pfkey);
            PacketDataHelper<str8>::load(_vobj, "zoneid", zoneid);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.handle;
        s << v.openid;
        s << v.openkey;
        s << v.pay_token;
        s << v.appid;
        s << v.ts;
        s << v.pf;
        s << v.pfkey;
        s << v.zoneid;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.handle;
        s >> v.openid;
        s >> v.openkey;
        s >> v.pay_token;
        s >> v.appid;
        s >> v.ts;
        s >> v.pf;
        s >> v.pfkey;
        s >> v.zoneid;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_BuyGoods : public Packet {
public:
    enum { ID = 209 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u64 handle;
        str8 openid;
        str8 openkey;
        str8 pay_token;
        str8 appid;
        str8 ts;
        str8 pf;
        str8 pfkey;
        str8 zoneid;
        str8 payitem;
        str8 goodsmeta;
        str8 goodsurl;
        str8 amt;
        str8 max_num;
        str8 appmode;
        str8 app_metadata;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u64>::save(_vobj, "handle", handle);
            PacketDataHelper<str8>::save(_vobj, "openid", openid);
            PacketDataHelper<str8>::save(_vobj, "openkey", openkey);
            PacketDataHelper<str8>::save(_vobj, "pay_token", pay_token);
            PacketDataHelper<str8>::save(_vobj, "appid", appid);
            PacketDataHelper<str8>::save(_vobj, "ts", ts);
            PacketDataHelper<str8>::save(_vobj, "pf", pf);
            PacketDataHelper<str8>::save(_vobj, "pfkey", pfkey);
            PacketDataHelper<str8>::save(_vobj, "zoneid", zoneid);
            PacketDataHelper<str8>::save(_vobj, "payitem", payitem);
            PacketDataHelper<str8>::save(_vobj, "goodsmeta", goodsmeta);
            PacketDataHelper<str8>::save(_vobj, "goodsurl", goodsurl);
            PacketDataHelper<str8>::save(_vobj, "amt", amt);
            PacketDataHelper<str8>::save(_vobj, "max_num", max_num);
            PacketDataHelper<str8>::save(_vobj, "appmode", appmode);
            PacketDataHelper<str8>::save(_vobj, "app_metadata", app_metadata);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u64>::load(_vobj, "handle", handle);
            PacketDataHelper<str8>::load(_vobj, "openid", openid);
            PacketDataHelper<str8>::load(_vobj, "openkey", openkey);
            PacketDataHelper<str8>::load(_vobj, "pay_token", pay_token);
            PacketDataHelper<str8>::load(_vobj, "appid", appid);
            PacketDataHelper<str8>::load(_vobj, "ts", ts);
            PacketDataHelper<str8>::load(_vobj, "pf", pf);
            PacketDataHelper<str8>::load(_vobj, "pfkey", pfkey);
            PacketDataHelper<str8>::load(_vobj, "zoneid", zoneid);
            PacketDataHelper<str8>::load(_vobj, "payitem", payitem);
            PacketDataHelper<str8>::load(_vobj, "goodsmeta", goodsmeta);
            PacketDataHelper<str8>::load(_vobj, "goodsurl", goodsurl);
            PacketDataHelper<str8>::load(_vobj, "amt", amt);
            PacketDataHelper<str8>::load(_vobj, "max_num", max_num);
            PacketDataHelper<str8>::load(_vobj, "appmode", appmode);
            PacketDataHelper<str8>::load(_vobj, "app_metadata", app_metadata);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.handle;
        s << v.openid;
        s << v.openkey;
        s << v.pay_token;
        s << v.appid;
        s << v.ts;
        s << v.pf;
        s << v.pfkey;
        s << v.zoneid;
        s << v.payitem;
        s << v.goodsmeta;
        s << v.goodsurl;
        s << v.amt;
        s << v.max_num;
        s << v.appmode;
        s << v.app_metadata;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.handle;
        s >> v.openid;
        s >> v.openkey;
        s >> v.pay_token;
        s >> v.appid;
        s >> v.ts;
        s >> v.pf;
        s >> v.pfkey;
        s >> v.zoneid;
        s >> v.payitem;
        s >> v.goodsmeta;
        s >> v.goodsurl;
        s >> v.amt;
        s >> v.max_num;
        s >> v.appmode;
        s >> v.app_metadata;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
class req_SubscribeM : public Packet {
public:
    enum { ID = 210 };
    virtual u32 pid() const { return ID; }
    struct _Data {
        u64 handle;
        str8 openid;
        str8 openkey;
        str8 pay_token;
        str8 appid;
        str8 ts;
        str8 pf;
        str8 pfkey;
        str8 zoneid;
        str8 cmd;
        str8 tss_inner_product_id;
        str8 buy_quantity;
        void _save(Variable_object &_vobj) const {
            PacketDataHelper<u64>::save(_vobj, "handle", handle);
            PacketDataHelper<str8>::save(_vobj, "openid", openid);
            PacketDataHelper<str8>::save(_vobj, "openkey", openkey);
            PacketDataHelper<str8>::save(_vobj, "pay_token", pay_token);
            PacketDataHelper<str8>::save(_vobj, "appid", appid);
            PacketDataHelper<str8>::save(_vobj, "ts", ts);
            PacketDataHelper<str8>::save(_vobj, "pf", pf);
            PacketDataHelper<str8>::save(_vobj, "pfkey", pfkey);
            PacketDataHelper<str8>::save(_vobj, "zoneid", zoneid);
            PacketDataHelper<str8>::save(_vobj, "cmd", cmd);
            PacketDataHelper<str8>::save(_vobj, "tss_inner_product_id", tss_inner_product_id);
            PacketDataHelper<str8>::save(_vobj, "buy_quantity", buy_quantity);
        }
        void _load(Variable_object &_vobj) {
            PacketDataHelper<u64>::load(_vobj, "handle", handle);
            PacketDataHelper<str8>::load(_vobj, "openid", openid);
            PacketDataHelper<str8>::load(_vobj, "openkey", openkey);
            PacketDataHelper<str8>::load(_vobj, "pay_token", pay_token);
            PacketDataHelper<str8>::load(_vobj, "appid", appid);
            PacketDataHelper<str8>::load(_vobj, "ts", ts);
            PacketDataHelper<str8>::load(_vobj, "pf", pf);
            PacketDataHelper<str8>::load(_vobj, "pfkey", pfkey);
            PacketDataHelper<str8>::load(_vobj, "zoneid", zoneid);
            PacketDataHelper<str8>::load(_vobj, "cmd", cmd);
            PacketDataHelper<str8>::load(_vobj, "tss_inner_product_id", tss_inner_product_id);
            PacketDataHelper<str8>::load(_vobj, "buy_quantity", buy_quantity);
        }
    } data;
    virtual void save(DataStream &s) const {
        auto &v = data;
        s << v.handle;
        s << v.openid;
        s << v.openkey;
        s << v.pay_token;
        s << v.appid;
        s << v.ts;
        s << v.pf;
        s << v.pfkey;
        s << v.zoneid;
        s << v.cmd;
        s << v.tss_inner_product_id;
        s << v.buy_quantity;
    }
    virtual void load(DataStream &s) {
        auto &v = data;
        s >> v.handle;
        s >> v.openid;
        s >> v.openkey;
        s >> v.pay_token;
        s >> v.appid;
        s >> v.ts;
        s >> v.pf;
        s >> v.pfkey;
        s >> v.zoneid;
        s >> v.cmd;
        s >> v.tss_inner_product_id;
        s >> v.buy_quantity;
    }
    virtual void save(Variable_object &vobj) const { data._save(vobj); }
    virtual void load(Variable_object &vobj) { data._load(vobj); }
};
